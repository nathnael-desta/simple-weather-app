"use strict";
(self["webpackChunkbasic_template"] = self["webpackChunkbasic_template"] || []).push([["index"],{

/***/ "./node_modules/@openmeteo/sdk/aggregation.js":
/*!****************************************************!*\
  !*** ./node_modules/@openmeteo/sdk/aggregation.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {


// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Aggregation = void 0;
var Aggregation;
(function (Aggregation) {
    Aggregation[Aggregation["none"] = 0] = "none";
    Aggregation[Aggregation["minimum"] = 1] = "minimum";
    Aggregation[Aggregation["maximum"] = 2] = "maximum";
    Aggregation[Aggregation["mean"] = 3] = "mean";
    Aggregation[Aggregation["p10"] = 4] = "p10";
    Aggregation[Aggregation["p25"] = 5] = "p25";
    Aggregation[Aggregation["median"] = 6] = "median";
    Aggregation[Aggregation["p75"] = 7] = "p75";
    Aggregation[Aggregation["p90"] = 8] = "p90";
    Aggregation[Aggregation["dominant"] = 9] = "dominant";
    Aggregation[Aggregation["sum"] = 10] = "sum";
})(Aggregation || (exports.Aggregation = Aggregation = {}));


/***/ }),

/***/ "./node_modules/@openmeteo/sdk/model.js":
/*!**********************************************!*\
  !*** ./node_modules/@openmeteo/sdk/model.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Model = void 0;
var Model;
(function (Model) {
    Model[Model["undefined"] = 0] = "undefined";
    Model[Model["best_match"] = 1] = "best_match";
    Model[Model["gfs_seamless"] = 2] = "gfs_seamless";
    Model[Model["gfs_global"] = 3] = "gfs_global";
    Model[Model["gfs_hrrr"] = 4] = "gfs_hrrr";
    Model[Model["meteofrance_seamless"] = 5] = "meteofrance_seamless";
    Model[Model["meteofrance_arpege_seamless"] = 6] = "meteofrance_arpege_seamless";
    Model[Model["meteofrance_arpege_world"] = 7] = "meteofrance_arpege_world";
    Model[Model["meteofrance_arpege_europe"] = 8] = "meteofrance_arpege_europe";
    Model[Model["meteofrance_arome_seamless"] = 9] = "meteofrance_arome_seamless";
    Model[Model["meteofrance_arome_france"] = 10] = "meteofrance_arome_france";
    Model[Model["meteofrance_arome_france_hd"] = 11] = "meteofrance_arome_france_hd";
    Model[Model["jma_seamless"] = 12] = "jma_seamless";
    Model[Model["jma_msm"] = 13] = "jma_msm";
    Model[Model["jms_gsm"] = 14] = "jms_gsm";
    Model[Model["jma_gsm"] = 15] = "jma_gsm";
    Model[Model["gem_seamless"] = 16] = "gem_seamless";
    Model[Model["gem_global"] = 17] = "gem_global";
    Model[Model["gem_regional"] = 18] = "gem_regional";
    Model[Model["gem_hrdps_continental"] = 19] = "gem_hrdps_continental";
    Model[Model["icon_seamless"] = 20] = "icon_seamless";
    Model[Model["icon_global"] = 21] = "icon_global";
    Model[Model["icon_eu"] = 22] = "icon_eu";
    Model[Model["icon_d2"] = 23] = "icon_d2";
    Model[Model["ecmwf_ifs04"] = 24] = "ecmwf_ifs04";
    Model[Model["metno_nordic"] = 25] = "metno_nordic";
    Model[Model["era5_seamless"] = 26] = "era5_seamless";
    Model[Model["era5"] = 27] = "era5";
    Model[Model["cerra"] = 28] = "cerra";
    Model[Model["era5_land"] = 29] = "era5_land";
    Model[Model["ecmwf_ifs"] = 30] = "ecmwf_ifs";
    Model[Model["gwam"] = 31] = "gwam";
    Model[Model["ewam"] = 32] = "ewam";
    Model[Model["glofas_seamless_v3"] = 33] = "glofas_seamless_v3";
    Model[Model["glofas_forecast_v3"] = 34] = "glofas_forecast_v3";
    Model[Model["glofas_consolidated_v3"] = 35] = "glofas_consolidated_v3";
    Model[Model["glofas_seamless_v4"] = 36] = "glofas_seamless_v4";
    Model[Model["glofas_forecast_v4"] = 37] = "glofas_forecast_v4";
    Model[Model["glofas_consolidated_v4"] = 38] = "glofas_consolidated_v4";
    Model[Model["gfs025"] = 39] = "gfs025";
    Model[Model["gfs05"] = 40] = "gfs05";
    Model[Model["CMCC_CM2_VHR4"] = 41] = "CMCC_CM2_VHR4";
    Model[Model["FGOALS_f3_H_highresSST"] = 42] = "FGOALS_f3_H_highresSST";
    Model[Model["FGOALS_f3_H"] = 43] = "FGOALS_f3_H";
    Model[Model["HiRAM_SIT_HR"] = 44] = "HiRAM_SIT_HR";
    Model[Model["MRI_AGCM3_2_S"] = 45] = "MRI_AGCM3_2_S";
    Model[Model["EC_Earth3P_HR"] = 46] = "EC_Earth3P_HR";
    Model[Model["MPI_ESM1_2_XR"] = 47] = "MPI_ESM1_2_XR";
    Model[Model["NICAM16_8S"] = 48] = "NICAM16_8S";
    Model[Model["cams_europe"] = 49] = "cams_europe";
    Model[Model["cams_global"] = 50] = "cams_global";
    Model[Model["cfsv2"] = 51] = "cfsv2";
    Model[Model["era5_ocean"] = 52] = "era5_ocean";
    Model[Model["cma_grapes_global"] = 53] = "cma_grapes_global";
    Model[Model["bom_access_global"] = 54] = "bom_access_global";
    Model[Model["bom_access_global_ensemble"] = 55] = "bom_access_global_ensemble";
    Model[Model["arpae_cosmo_seamless"] = 56] = "arpae_cosmo_seamless";
    Model[Model["arpae_cosmo_2i"] = 57] = "arpae_cosmo_2i";
    Model[Model["arpae_cosmo_2i_ruc"] = 58] = "arpae_cosmo_2i_ruc";
    Model[Model["arpae_cosmo_5m"] = 59] = "arpae_cosmo_5m";
    Model[Model["ecmwf_ifs025"] = 60] = "ecmwf_ifs025";
})(Model || (exports.Model = Model = {}));


/***/ }),

/***/ "./node_modules/@openmeteo/sdk/unit.js":
/*!*********************************************!*\
  !*** ./node_modules/@openmeteo/sdk/unit.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {


// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Unit = void 0;
var Unit;
(function (Unit) {
    Unit[Unit["undefined"] = 0] = "undefined";
    Unit[Unit["celsius"] = 1] = "celsius";
    Unit[Unit["centimetre"] = 2] = "centimetre";
    Unit[Unit["cubic_metre_per_cubic_metre"] = 3] = "cubic_metre_per_cubic_metre";
    Unit[Unit["cubic_metre_per_second"] = 4] = "cubic_metre_per_second";
    Unit[Unit["degree_direction"] = 5] = "degree_direction";
    Unit[Unit["dimensionless_integer"] = 6] = "dimensionless_integer";
    Unit[Unit["dimensionless"] = 7] = "dimensionless";
    Unit[Unit["european_air_quality_index"] = 8] = "european_air_quality_index";
    Unit[Unit["fahrenheit"] = 9] = "fahrenheit";
    Unit[Unit["feet"] = 10] = "feet";
    Unit[Unit["fraction"] = 11] = "fraction";
    Unit[Unit["gdd_celsius"] = 12] = "gdd_celsius";
    Unit[Unit["geopotential_metre"] = 13] = "geopotential_metre";
    Unit[Unit["grains_per_cubic_metre"] = 14] = "grains_per_cubic_metre";
    Unit[Unit["gram_per_kilogram"] = 15] = "gram_per_kilogram";
    Unit[Unit["hectopascal"] = 16] = "hectopascal";
    Unit[Unit["hours"] = 17] = "hours";
    Unit[Unit["inch"] = 18] = "inch";
    Unit[Unit["iso8601"] = 19] = "iso8601";
    Unit[Unit["joule_per_kilogram"] = 20] = "joule_per_kilogram";
    Unit[Unit["kelvin"] = 21] = "kelvin";
    Unit[Unit["kilopascal"] = 22] = "kilopascal";
    Unit[Unit["kilogram_per_square_metre"] = 23] = "kilogram_per_square_metre";
    Unit[Unit["kilometres_per_hour"] = 24] = "kilometres_per_hour";
    Unit[Unit["knots"] = 25] = "knots";
    Unit[Unit["megajoule_per_square_metre"] = 26] = "megajoule_per_square_metre";
    Unit[Unit["metre_per_second_not_unit_converted"] = 27] = "metre_per_second_not_unit_converted";
    Unit[Unit["metre_per_second"] = 28] = "metre_per_second";
    Unit[Unit["metre"] = 29] = "metre";
    Unit[Unit["micrograms_per_cubic_metre"] = 30] = "micrograms_per_cubic_metre";
    Unit[Unit["miles_per_hour"] = 31] = "miles_per_hour";
    Unit[Unit["millimetre"] = 32] = "millimetre";
    Unit[Unit["pascal"] = 33] = "pascal";
    Unit[Unit["per_second"] = 34] = "per_second";
    Unit[Unit["percentage"] = 35] = "percentage";
    Unit[Unit["seconds"] = 36] = "seconds";
    Unit[Unit["unix_time"] = 37] = "unix_time";
    Unit[Unit["us_air_quality_index"] = 38] = "us_air_quality_index";
    Unit[Unit["watt_per_square_metre"] = 39] = "watt_per_square_metre";
    Unit[Unit["wmo_code"] = 40] = "wmo_code";
})(Unit || (exports.Unit = Unit = {}));


/***/ }),

/***/ "./node_modules/@openmeteo/sdk/variable-with-values.js":
/*!*************************************************************!*\
  !*** ./node_modules/@openmeteo/sdk/variable-with-values.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableWithValues = void 0;
const flatbuffers = __importStar(__webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/mjs/flatbuffers.js"));
const aggregation_js_1 = __webpack_require__(/*! ./aggregation.js */ "./node_modules/@openmeteo/sdk/aggregation.js");
const unit_js_1 = __webpack_require__(/*! ./unit.js */ "./node_modules/@openmeteo/sdk/unit.js");
const variable_js_1 = __webpack_require__(/*! ./variable.js */ "./node_modules/@openmeteo/sdk/variable.js");
class VariableWithValues {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVariableWithValues(bb, obj) {
        return (obj || new VariableWithValues()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVariableWithValues(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VariableWithValues()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    variable() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : variable_js_1.Variable.undefined;
    }
    unit() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : unit_js_1.Unit.undefined;
    }
    value() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    values(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    valuesLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    valuesArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    valuesInt64(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    }
    valuesInt64Length() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    altitude() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    aggregation() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : aggregation_js_1.Aggregation.none;
    }
    pressureLevel() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    depth() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    depthTo() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    ensembleMember() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    previousDay() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
}
exports.VariableWithValues = VariableWithValues;


/***/ }),

/***/ "./node_modules/@openmeteo/sdk/variable.js":
/*!*************************************************!*\
  !*** ./node_modules/@openmeteo/sdk/variable.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {


// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Variable = void 0;
var Variable;
(function (Variable) {
    Variable[Variable["undefined"] = 0] = "undefined";
    Variable[Variable["apparent_temperature"] = 1] = "apparent_temperature";
    Variable[Variable["cape"] = 2] = "cape";
    Variable[Variable["cloud_cover"] = 3] = "cloud_cover";
    Variable[Variable["cloud_cover_high"] = 4] = "cloud_cover_high";
    Variable[Variable["cloud_cover_low"] = 5] = "cloud_cover_low";
    Variable[Variable["cloud_cover_mid"] = 6] = "cloud_cover_mid";
    Variable[Variable["daylight_duration"] = 7] = "daylight_duration";
    Variable[Variable["dew_point"] = 8] = "dew_point";
    Variable[Variable["diffuse_radiation"] = 9] = "diffuse_radiation";
    Variable[Variable["diffuse_radiation_instant"] = 10] = "diffuse_radiation_instant";
    Variable[Variable["direct_normal_irradiance"] = 11] = "direct_normal_irradiance";
    Variable[Variable["direct_normal_irradiance_instant"] = 12] = "direct_normal_irradiance_instant";
    Variable[Variable["direct_radiation"] = 13] = "direct_radiation";
    Variable[Variable["direct_radiation_instant"] = 14] = "direct_radiation_instant";
    Variable[Variable["et0_fao_evapotranspiration"] = 15] = "et0_fao_evapotranspiration";
    Variable[Variable["evapotranspiration"] = 16] = "evapotranspiration";
    Variable[Variable["freezing_level_height"] = 17] = "freezing_level_height";
    Variable[Variable["growing_degree_days"] = 18] = "growing_degree_days";
    Variable[Variable["is_day"] = 19] = "is_day";
    Variable[Variable["latent_heat_flux"] = 20] = "latent_heat_flux";
    Variable[Variable["leaf_wetness_probability"] = 21] = "leaf_wetness_probability";
    Variable[Variable["lifted_index"] = 22] = "lifted_index";
    Variable[Variable["lightning_potential"] = 23] = "lightning_potential";
    Variable[Variable["precipitation"] = 24] = "precipitation";
    Variable[Variable["precipitation_hours"] = 25] = "precipitation_hours";
    Variable[Variable["precipitation_probability"] = 26] = "precipitation_probability";
    Variable[Variable["pressure_msl"] = 27] = "pressure_msl";
    Variable[Variable["rain"] = 28] = "rain";
    Variable[Variable["relative_humidity"] = 29] = "relative_humidity";
    Variable[Variable["runoff"] = 30] = "runoff";
    Variable[Variable["sensible_heat_flux"] = 31] = "sensible_heat_flux";
    Variable[Variable["shortwave_radiation"] = 32] = "shortwave_radiation";
    Variable[Variable["shortwave_radiation_instant"] = 33] = "shortwave_radiation_instant";
    Variable[Variable["showers"] = 34] = "showers";
    Variable[Variable["snow_depth"] = 35] = "snow_depth";
    Variable[Variable["snow_height"] = 36] = "snow_height";
    Variable[Variable["snowfall"] = 37] = "snowfall";
    Variable[Variable["snowfall_height"] = 38] = "snowfall_height";
    Variable[Variable["snowfall_water_equivalent"] = 39] = "snowfall_water_equivalent";
    Variable[Variable["sunrise"] = 40] = "sunrise";
    Variable[Variable["sunset"] = 41] = "sunset";
    Variable[Variable["soil_moisture"] = 42] = "soil_moisture";
    Variable[Variable["soil_moisture_index"] = 43] = "soil_moisture_index";
    Variable[Variable["soil_temperature"] = 44] = "soil_temperature";
    Variable[Variable["surface_pressure"] = 45] = "surface_pressure";
    Variable[Variable["surface_temperature"] = 46] = "surface_temperature";
    Variable[Variable["temperature"] = 47] = "temperature";
    Variable[Variable["terrestrial_radiation"] = 48] = "terrestrial_radiation";
    Variable[Variable["terrestrial_radiation_instant"] = 49] = "terrestrial_radiation_instant";
    Variable[Variable["total_column_integrated_water_vapour"] = 50] = "total_column_integrated_water_vapour";
    Variable[Variable["updraft"] = 51] = "updraft";
    Variable[Variable["uv_index"] = 52] = "uv_index";
    Variable[Variable["uv_index_clear_sky"] = 53] = "uv_index_clear_sky";
    Variable[Variable["vapour_pressure_deficit"] = 54] = "vapour_pressure_deficit";
    Variable[Variable["visibility"] = 55] = "visibility";
    Variable[Variable["weather_code"] = 56] = "weather_code";
    Variable[Variable["wind_direction"] = 57] = "wind_direction";
    Variable[Variable["wind_gusts"] = 58] = "wind_gusts";
    Variable[Variable["wind_speed"] = 59] = "wind_speed";
    Variable[Variable["vertical_velocity"] = 60] = "vertical_velocity";
    Variable[Variable["geopotential_height"] = 61] = "geopotential_height";
    Variable[Variable["wet_bulb_temperature"] = 62] = "wet_bulb_temperature";
    Variable[Variable["river_discharge"] = 63] = "river_discharge";
    Variable[Variable["wave_height"] = 64] = "wave_height";
    Variable[Variable["wave_period"] = 65] = "wave_period";
    Variable[Variable["wave_direction"] = 66] = "wave_direction";
    Variable[Variable["wind_wave_height"] = 67] = "wind_wave_height";
    Variable[Variable["wind_wave_period"] = 68] = "wind_wave_period";
    Variable[Variable["wind_wave_peak_period"] = 69] = "wind_wave_peak_period";
    Variable[Variable["wind_wave_direction"] = 70] = "wind_wave_direction";
    Variable[Variable["swell_wave_height"] = 71] = "swell_wave_height";
    Variable[Variable["swell_wave_period"] = 72] = "swell_wave_period";
    Variable[Variable["swell_wave_peak_period"] = 73] = "swell_wave_peak_period";
    Variable[Variable["swell_wave_direction"] = 74] = "swell_wave_direction";
    Variable[Variable["pm10"] = 75] = "pm10";
    Variable[Variable["pm2p5"] = 76] = "pm2p5";
    Variable[Variable["dust"] = 77] = "dust";
    Variable[Variable["aerosol_optical_depth"] = 78] = "aerosol_optical_depth";
    Variable[Variable["carbon_monoxide"] = 79] = "carbon_monoxide";
    Variable[Variable["nitrogen_dioxide"] = 80] = "nitrogen_dioxide";
    Variable[Variable["ammonia"] = 81] = "ammonia";
    Variable[Variable["ozone"] = 82] = "ozone";
    Variable[Variable["sulphur_dioxide"] = 83] = "sulphur_dioxide";
    Variable[Variable["alder_pollen"] = 84] = "alder_pollen";
    Variable[Variable["birch_pollen"] = 85] = "birch_pollen";
    Variable[Variable["grass_pollen"] = 86] = "grass_pollen";
    Variable[Variable["mugwort_pollen"] = 87] = "mugwort_pollen";
    Variable[Variable["olive_pollen"] = 88] = "olive_pollen";
    Variable[Variable["ragweed_pollen"] = 89] = "ragweed_pollen";
    Variable[Variable["european_aqi"] = 90] = "european_aqi";
    Variable[Variable["european_aqi_pm2p5"] = 91] = "european_aqi_pm2p5";
    Variable[Variable["european_aqi_pm10"] = 92] = "european_aqi_pm10";
    Variable[Variable["european_aqi_nitrogen_dioxide"] = 93] = "european_aqi_nitrogen_dioxide";
    Variable[Variable["european_aqi_ozone"] = 94] = "european_aqi_ozone";
    Variable[Variable["european_aqi_sulphur_dioxide"] = 95] = "european_aqi_sulphur_dioxide";
    Variable[Variable["us_aqi"] = 96] = "us_aqi";
    Variable[Variable["us_aqi_pm2p5"] = 97] = "us_aqi_pm2p5";
    Variable[Variable["us_aqi_pm10"] = 98] = "us_aqi_pm10";
    Variable[Variable["us_aqi_nitrogen_dioxide"] = 99] = "us_aqi_nitrogen_dioxide";
    Variable[Variable["us_aqi_ozone"] = 100] = "us_aqi_ozone";
    Variable[Variable["us_aqi_sulphur_dioxide"] = 101] = "us_aqi_sulphur_dioxide";
    Variable[Variable["us_aqi_carbon_monoxide"] = 102] = "us_aqi_carbon_monoxide";
    Variable[Variable["sunshine_duration"] = 103] = "sunshine_duration";
    Variable[Variable["convective_inhibition"] = 104] = "convective_inhibition";
    Variable[Variable["shortwave_radiation_clear_sky"] = 105] = "shortwave_radiation_clear_sky";
    Variable[Variable["global_tilted_irradiance"] = 106] = "global_tilted_irradiance";
    Variable[Variable["global_tilted_irradiance_instant"] = 107] = "global_tilted_irradiance_instant";
})(Variable || (exports.Variable = Variable = {}));


/***/ }),

/***/ "./node_modules/@openmeteo/sdk/variables-with-time.js":
/*!************************************************************!*\
  !*** ./node_modules/@openmeteo/sdk/variables-with-time.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariablesWithTime = void 0;
const flatbuffers = __importStar(__webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/mjs/flatbuffers.js"));
const variable_with_values_js_1 = __webpack_require__(/*! ./variable-with-values.js */ "./node_modules/@openmeteo/sdk/variable-with-values.js");
class VariablesWithTime {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVariablesWithTime(bb, obj) {
        return (obj || new VariablesWithTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVariablesWithTime(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VariablesWithTime()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    time() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    timeEnd() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    interval() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    variables(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new variable_with_values_js_1.VariableWithValues()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    variablesLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
}
exports.VariablesWithTime = VariablesWithTime;


/***/ }),

/***/ "./node_modules/@openmeteo/sdk/weather-api-response.js":
/*!*************************************************************!*\
  !*** ./node_modules/@openmeteo/sdk/weather-api-response.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WeatherApiResponse = void 0;
const flatbuffers = __importStar(__webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/mjs/flatbuffers.js"));
const model_js_1 = __webpack_require__(/*! ./model.js */ "./node_modules/@openmeteo/sdk/model.js");
const variables_with_time_js_1 = __webpack_require__(/*! ./variables-with-time.js */ "./node_modules/@openmeteo/sdk/variables-with-time.js");
class WeatherApiResponse {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsWeatherApiResponse(bb, obj) {
        return (obj || new WeatherApiResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsWeatherApiResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WeatherApiResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    latitude() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    longitude() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    elevation() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    generationTimeMilliseconds() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    locationId() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    model() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : model_js_1.Model.undefined;
    }
    utcOffsetSeconds() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    timezone(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timezoneAbbreviation(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    current(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new variables_with_time_js_1.VariablesWithTime()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    daily(obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new variables_with_time_js_1.VariablesWithTime()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    hourly(obj) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? (obj || new variables_with_time_js_1.VariablesWithTime()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    minutely15(obj) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? (obj || new variables_with_time_js_1.VariablesWithTime()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    sixHourly(obj) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? (obj || new variables_with_time_js_1.VariablesWithTime()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
}
exports.WeatherApiResponse = WeatherApiResponse;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/style.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/style.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/fonts/static/Inter-Thin.ttf */ "./src/Assets/fonts/static/Inter-Thin.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/fonts/static/Inter-Bold.ttf */ "./src/Assets/fonts/static/Inter-Bold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/fonts/static/Inter-Regular.ttf */ "./src/Assets/fonts/static/Inter-Regular.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/fonts/static/Inter-Light.ttf */ "./src/Assets/fonts/static/Inter-Light.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/fonts/static/Inter-SemiBold.ttf */ "./src/Assets/fonts/static/Inter-SemiBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/fonts/static/Inter-Medium.ttf */ "./src/Assets/fonts/static/Inter-Medium.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(/*! ./Assets/Images/3.jpg */ "./src/Assets/Images/3.jpg"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);
var ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);
var ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@font-face {
    font-family: myThin;
    src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("truetype");
    font-weight: 600;
    font-style: normal;
}

@font-face {
    font-family: myBold;
    src: url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("truetype");
    font-weight: 600;
    font-style: normal;
}

@font-face {
    font-family: myRegular;
    src: url(${___CSS_LOADER_URL_REPLACEMENT_2___}) format("truetype");
    font-weight: 600;
    font-style: normal;
}

@font-face {
    font-family: myLight;
    src: url(${___CSS_LOADER_URL_REPLACEMENT_3___}) format("truetype");
    font-weight: 600;
    font-style: normal;
}

@font-face {
    font-family: mySemiBold;
    src: url(${___CSS_LOADER_URL_REPLACEMENT_4___}) format("truetype");
    font-weight: 600;
    font-style: normal;
}

@font-face {
    font-family: myMedium;
    src: url(${___CSS_LOADER_URL_REPLACEMENT_5___}) format("truetype");
    font-weight: 600;
    font-style: normal;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body::-webkit-scrollbar {
    display: none;
}

.main {
    height: 1700px;
    width: 100vw;
    display: flex;
    flex-direction: column;

    background-color: #d9d9d9;
    font-family: myRegular, sans-serif;
    color: #37414c;
}

.main::-webkit-scrollbar {
    display: none;
}

.top {
    flex: 0.1992;
    background-repeat: no-repeat;
    background-size: cover;
    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_6___});
    background-position: bottom;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;

    .search-div {
        position: relative;
        width: 100%;
        display: flex;
        justify-content: center;

        .search {
            outline: none;
            border: none;
            background-color: #f0f2f5;
            width: 70%;
            height: 82px;
            border-radius: 46px;
            padding: 0 60px;
            font-size: 27px;
        }

        ::placeholder {
            font-size: 27px;
        }

        .search-svg {
            position: absolute;
            top: 23%;
            right: 18%;
            cursor: pointer;
            scale: 0.714;
        }
    }
}

.middle {
    flex: 0.3871;
    display: flex;
    justify-content: center;
    align-items: center;

    .weather {
        background-color: white;
        width: min(95%, 1100px);
        height: 80%;
        border-radius: 42px;
        box-shadow: 0 2px 5px rgb(0 0 0 / 20%);
        display: grid;
        grid-template-columns: 1fr 1.3fr;
        grid-template-rows: 1fr 1fr;
        padding: 0 30px;

        @media (width <= 1100px) {
            & {
                padding: 0 3%;
            }
        }

        .left {
            grid-row: 1/ 2;
            grid-column: 1/2;
            display: grid;
            grid-template-columns: 1fr 0.9fr;
            margin-left: -27px;

            @media (width <= 1100px) {
                & {
                    margin-left: -2.5vw;
                }
            }

            .svg-container {
                grid-area: "svg";
                display: flex;
                justify-content: center;
                align-items: center;

                .weather-svg {
                    width: 195px;
                    height: auto;

                    @media (width <= 1100px) {
                        & {
                            width: 17.6vw;
                            height: auto;
                        }
                    }
                }
            }

            .temp-text {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;

                .big {
                    font-size: 100px;
                    position: relative;
                    margin-top: -30px;
                    margin-left: -170px;
                    min-width: 150px;
                    display: flex;
                    justify-content: end;

                    @media (width <= 1100px) {
                        & {
                            margin-left: -7.5vw;
                            font-size: 8.85vw;
                        }
                    }

                    .degree {
                        position: absolute;
                        font-family: myLight, sans-serif;
                        font-size: 40px;
                        right: -20px;

                        @media (width <= 1100px) {
                            & {
                                font-size: 3.54vw;
                            }
                        }
                    }

                    .unit {
                        position: absolute;
                        right: -50px;
                        font-size: 48px;
                        font-family: myLight, sans-serif;

                        @media (width <= 1100px) {
                            & {
                                font-size: 4.25vw;
                                right: -44%;
                            }
                        }
                    }

                    .c {
                        width: 30px;
                        height: auto;

                        @media (width <= 1100px) {
                            & {
                                width: 2.65vw;
                            }
                        }
                    }

                    .feels {
                        position: absolute;
                        font-size: 25px;
                        bottom: -28px;
                        right: -50px;

                        @media (width <= 1100px) {
                            & {
                                font-size: 2.21vw;
                                right: -2.65;
                            }
                        }
                    }
                }
            }
        }

        .right {
            grid-row: 1 / 2;
            grid-column: 2/ 3;
            display: grid;
            grid-template-columns: 3.83fr 1fr;
            grid-template-rows: 1fr 1.5fr;
            margin-left: 30px;

            @media (width <= 1100px) {
                & {
                    margin-left: 2.65vw;
                }
            }

            .place {
                display: flex;
                align-items: center;
                font-family: myMedium, sans-serif;
                font-size: 30px;
                margin-bottom: -32px;

                @media (width <= 1100px) {
                    & {
                        font-size: 2.65vw;
                    }
                }
            }

            .date {
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 30px;
                margin-bottom: -32px;

                @media (width <= 1100px) {
                    & {
                        font-size: 2.65vw;
                    }
                }
            }

            .day-choice {
                grid-column: 1 / 3;
                display: flex;
                justify-content: center;
                align-items: center;
                margin-top: -20px;

                .day-container {
                    width: 100%;
                    height: 65px;
                    display: grid;
                    grid-template-columns: 1fr 1fr 1fr;
                    background-color: #f0f2f5;
                    border-radius: 54px;
                    border: 1px #d9d9d9 solid;
                    font-family: myRegular, sans-serif;
                    font-size: 30px;

                    @media (width <= 1100px) {
                        & {
                            font-size: 2.65vw;
                        }
                    }

                    .today {
                        border-right: 1px #d9d9d9 solid;
                        width: 100%;
                        height: 100%;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        border-radius: 54px;
                        border-bottom-right-radius: 0;
                        border-top-right-radius: 0;
                        cursor: pointer;
                        opacity: 0.9;
                        transition: opacity 0.3s ease;
                        transform: box-shadow 0.3s ease;

                        &:hover {
                            opacity: 1;
                            box-shadow: 0 2.5px 5px 0 #1a181d1f;
                        }
                    }

                    .picked {
                        background-color: rgb(250, 158, 66);
                    }

                    .picked_night {
                        background-color: rgb(165, 134, 252);
                    }

                    .tomorrow {
                        border-right: 1px #d9d9d9 solid;
                        width: 100%;
                        height: 100%;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        cursor: pointer;
                        opacity: 0.9;
                        transition: opacity 0.3s ease;
                        transform: box-shadow 0.3s ease;

                        &:hover {
                            opacity: 1;
                            box-shadow: 0 2.5px 5px 0 #1a181d1f;
                        }
                    }

                    .two-days {
                        width: 100%;
                        height: 100%;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        border-radius: 54px;
                        border-bottom-left-radius: 0;
                        border-top-left-radius: 0;
                        cursor: pointer;
                        opacity: 0.9;
                        transition: opacity 0.3s ease;
                        transform: box-shadow 0.3s ease;

                        &:hover {
                            opacity: 1;
                            box-shadow: 0 2.5px 5px 0 #1a181d1f;
                        }
                    }
                }
            }
        }

        .display {
            grid-row: 2 / 3;
            grid-column: 1/ 3;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr;
            padding: 25px 20px 5px;
            justify-items: center;
            gap: 0;

            @media (width <= 1100px) {
                & {
                    padding: 25px 2% 5px;
                    margin-left: -2.7%;
                }
            }

            .info {
                display: flex;
                justify-content: center;
                align-items: center;
                width: 220px;
                height: 65px;

                @media (width <= 1100px) {
                    & {
                        width: 73%;
                    }
                }

                .info_svg_container {
                    min-width: 65px;
                    height: 85px;
                    display: flex;
                    justify-content: center;

                    svg {
                        grid-column: 1 / 2;
                        grid-row: 1 / 3;
                        max-width: 65px;

                        /* height: auto; */
                        max-height: 85px;

                        @media (width <= 1100px) {
                            & {
                                width: 5.75vw;
                                height: auto;
                            }
                        }
                    }

                    /* .min-svg,
                    .max-svg {
                        width: 40px;
                        height: 80px;
                    } */
                }

                .righter {
                    width: 100%;
                    padding-left: 10px;

                    .title {
                        grid-column: 2 / 3;
                        align-self: center;
                        font-family: myRegular, sans-serif;
                        font-size: 25px;

                        @media (width <= 1100px) {
                            & {
                                font-size: 2.21vw;
                            }
                        }
                    }

                    .number {
                        grid-column: 2 / 3;
                        align-self: self-start;
                        font-family: myRegular, sans-serif;
                        font-size: 25px;
                        width: 100%;

                        @media (width <= 1100px) {
                            & {
                                font-size: 2.21vw;
                            }
                        }
                    }
                }
            }
        }
    }
}

.bottom {
    flex: 0.4136;
    display: flex;
    height: 500px;
    background-color: white;
    position: relative;

    .cities {
        flex: 0.25;
        padding: 40px 30px;
        position: relative;

        .country {
            font-family: mySemiBold, sans-serif;
            font-size: 30px;
        }

        .city_container {
            padding: 30px 0;
            display: flex;
            flex-direction: column;
            gap: 10px;

            .city {
                background-color: #8080802e;
                height: 55px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 0 30px;
                border-radius: 15px;
                box-shadow: 0 2px 2px rgb(0 0 0 / 20%);

                .city-name {
                    font-family: mySemiBold, sans-serif;
                    font-size: 20px;
                }

                .city-weather {
                    display: flex;
                    gap: 20px;
                    align-items: center;

                    .city-temp {
                        font-size: 20px;
                    }

                    .city_svg_div {
                        .city-svg {
                            width: 40px;
                            height: auto;
                        }
                    }
                }
            }
        }
    }

    .hourly {
        display: flex;
        flex: 0.75;
        width: 500px;
        padding: 40px 30px;
        flex-direction: column;

        .hourly-city {
            font-family: mySemiBold, sans-serif;
            font-size: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;

            .city-date {
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 30px;
                font-family: myRegular, sans-serif;

                @media (width <= 1100px) {
                    & {
                        font-size: 2.65vw;
                    }
                }
            }
        }

        .chart_container {
            position: relative;
            min-height: 740px;
            min-width: 100%;
        }

        canvas {
            width: 100%;
            min-height: 740px;
        }
    }
}

.bottom::before {
    content: "";
    border: 1px solid #d9d9d9;
    position: absolute;
    left: 26.5%;
    top: 110px;
    bottom: -110px;
}

.random {
    background-color: rgba(116, 66, 253, 0.686);
}
`, "",{"version":3,"sources":["webpack://./src/style.css"],"names":[],"mappings":"AAAA;IACI,mBAAmB;IACnB,+DAAmE;IACnE,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,+DAAmE;IACnE,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,+DAAsE;IACtE,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,oBAAoB;IACpB,+DAAoE;IACpE,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,uBAAuB;IACvB,+DAAuE;IACvE,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,+DAAqE;IACrE,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;;IAEtB,yBAAyB;IACzB,kCAAkC;IAClC,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,4BAA4B;IAC5B,sBAAsB;IACtB,yDAA8C;IAC9C,2BAA2B;IAC3B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;;IAElB;QACI,kBAAkB;QAClB,WAAW;QACX,aAAa;QACb,uBAAuB;;QAEvB;YACI,aAAa;YACb,YAAY;YACZ,yBAAyB;YACzB,UAAU;YACV,YAAY;YACZ,mBAAmB;YACnB,eAAe;YACf,eAAe;QACnB;;QAEA;YACI,eAAe;QACnB;;QAEA;YACI,kBAAkB;YAClB,QAAQ;YACR,UAAU;YACV,eAAe;YACf,YAAY;QAChB;IACJ;AACJ;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;IAEnB;QACI,uBAAuB;QACvB,uBAAuB;QACvB,WAAW;QACX,mBAAmB;QACnB,sCAAsC;QACtC,aAAa;QACb,gCAAgC;QAChC,2BAA2B;QAC3B,eAAe;;QAEf;YACI;gBACI,aAAa;YACjB;QACJ;;QAEA;YACI,cAAc;YACd,gBAAgB;YAChB,aAAa;YACb,gCAAgC;YAChC,kBAAkB;;YAElB;gBACI;oBACI,mBAAmB;gBACvB;YACJ;;YAEA;gBACI,gBAAgB;gBAChB,aAAa;gBACb,uBAAuB;gBACvB,mBAAmB;;gBAEnB;oBACI,YAAY;oBACZ,YAAY;;oBAEZ;wBACI;4BACI,aAAa;4BACb,YAAY;wBAChB;oBACJ;gBACJ;YACJ;;YAEA;gBACI,aAAa;gBACb,sBAAsB;gBACtB,mBAAmB;gBACnB,uBAAuB;;gBAEvB;oBACI,gBAAgB;oBAChB,kBAAkB;oBAClB,iBAAiB;oBACjB,mBAAmB;oBACnB,gBAAgB;oBAChB,aAAa;oBACb,oBAAoB;;oBAEpB;wBACI;4BACI,mBAAmB;4BACnB,iBAAiB;wBACrB;oBACJ;;oBAEA;wBACI,kBAAkB;wBAClB,gCAAgC;wBAChC,eAAe;wBACf,YAAY;;wBAEZ;4BACI;gCACI,iBAAiB;4BACrB;wBACJ;oBACJ;;oBAEA;wBACI,kBAAkB;wBAClB,YAAY;wBACZ,eAAe;wBACf,gCAAgC;;wBAEhC;4BACI;gCACI,iBAAiB;gCACjB,WAAW;4BACf;wBACJ;oBACJ;;oBAEA;wBACI,WAAW;wBACX,YAAY;;wBAEZ;4BACI;gCACI,aAAa;4BACjB;wBACJ;oBACJ;;oBAEA;wBACI,kBAAkB;wBAClB,eAAe;wBACf,aAAa;wBACb,YAAY;;wBAEZ;4BACI;gCACI,iBAAiB;gCACjB,YAAY;4BAChB;wBACJ;oBACJ;gBACJ;YACJ;QACJ;;QAEA;YACI,eAAe;YACf,iBAAiB;YACjB,aAAa;YACb,iCAAiC;YACjC,6BAA6B;YAC7B,iBAAiB;;YAEjB;gBACI;oBACI,mBAAmB;gBACvB;YACJ;;YAEA;gBACI,aAAa;gBACb,mBAAmB;gBACnB,iCAAiC;gBACjC,eAAe;gBACf,oBAAoB;;gBAEpB;oBACI;wBACI,iBAAiB;oBACrB;gBACJ;YACJ;;YAEA;gBACI,aAAa;gBACb,mBAAmB;gBACnB,uBAAuB;gBACvB,eAAe;gBACf,oBAAoB;;gBAEpB;oBACI;wBACI,iBAAiB;oBACrB;gBACJ;YACJ;;YAEA;gBACI,kBAAkB;gBAClB,aAAa;gBACb,uBAAuB;gBACvB,mBAAmB;gBACnB,iBAAiB;;gBAEjB;oBACI,WAAW;oBACX,YAAY;oBACZ,aAAa;oBACb,kCAAkC;oBAClC,yBAAyB;oBACzB,mBAAmB;oBACnB,yBAAyB;oBACzB,kCAAkC;oBAClC,eAAe;;oBAEf;wBACI;4BACI,iBAAiB;wBACrB;oBACJ;;oBAEA;wBACI,+BAA+B;wBAC/B,WAAW;wBACX,YAAY;wBACZ,aAAa;wBACb,uBAAuB;wBACvB,mBAAmB;wBACnB,mBAAmB;wBACnB,6BAA6B;wBAC7B,0BAA0B;wBAC1B,eAAe;wBACf,YAAY;wBACZ,6BAA6B;wBAC7B,+BAA+B;;wBAE/B;4BACI,UAAU;4BACV,mCAAmC;wBACvC;oBACJ;;oBAEA;wBACI,mCAAmC;oBACvC;;oBAEA;wBACI,oCAAoC;oBACxC;;oBAEA;wBACI,+BAA+B;wBAC/B,WAAW;wBACX,YAAY;wBACZ,aAAa;wBACb,uBAAuB;wBACvB,mBAAmB;wBACnB,eAAe;wBACf,YAAY;wBACZ,6BAA6B;wBAC7B,+BAA+B;;wBAE/B;4BACI,UAAU;4BACV,mCAAmC;wBACvC;oBACJ;;oBAEA;wBACI,WAAW;wBACX,YAAY;wBACZ,aAAa;wBACb,uBAAuB;wBACvB,mBAAmB;wBACnB,mBAAmB;wBACnB,4BAA4B;wBAC5B,yBAAyB;wBACzB,eAAe;wBACf,YAAY;wBACZ,6BAA6B;wBAC7B,+BAA+B;;wBAE/B;4BACI,UAAU;4BACV,mCAAmC;wBACvC;oBACJ;gBACJ;YACJ;QACJ;;QAEA;YACI,eAAe;YACf,iBAAiB;YACjB,aAAa;YACb,sCAAsC;YACtC,sBAAsB;YACtB,qBAAqB;YACrB,MAAM;;YAEN;gBACI;oBACI,oBAAoB;oBACpB,kBAAkB;gBACtB;YACJ;;YAEA;gBACI,aAAa;gBACb,uBAAuB;gBACvB,mBAAmB;gBACnB,YAAY;gBACZ,YAAY;;gBAEZ;oBACI;wBACI,UAAU;oBACd;gBACJ;;gBAEA;oBACI,eAAe;oBACf,YAAY;oBACZ,aAAa;oBACb,uBAAuB;;oBAEvB;wBACI,kBAAkB;wBAClB,eAAe;wBACf,eAAe;;wBAEf,kBAAkB;wBAClB,gBAAgB;;wBAEhB;4BACI;gCACI,aAAa;gCACb,YAAY;4BAChB;wBACJ;oBACJ;;oBAEA;;;;uBAIG;gBACP;;gBAEA;oBACI,WAAW;oBACX,kBAAkB;;oBAElB;wBACI,kBAAkB;wBAClB,kBAAkB;wBAClB,kCAAkC;wBAClC,eAAe;;wBAEf;4BACI;gCACI,iBAAiB;4BACrB;wBACJ;oBACJ;;oBAEA;wBACI,kBAAkB;wBAClB,sBAAsB;wBACtB,kCAAkC;wBAClC,eAAe;wBACf,WAAW;;wBAEX;4BACI;gCACI,iBAAiB;4BACrB;wBACJ;oBACJ;gBACJ;YACJ;QACJ;IACJ;AACJ;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,kBAAkB;;IAElB;QACI,UAAU;QACV,kBAAkB;QAClB,kBAAkB;;QAElB;YACI,mCAAmC;YACnC,eAAe;QACnB;;QAEA;YACI,eAAe;YACf,aAAa;YACb,sBAAsB;YACtB,SAAS;;YAET;gBACI,2BAA2B;gBAC3B,YAAY;gBACZ,aAAa;gBACb,8BAA8B;gBAC9B,mBAAmB;gBACnB,eAAe;gBACf,mBAAmB;gBACnB,sCAAsC;;gBAEtC;oBACI,mCAAmC;oBACnC,eAAe;gBACnB;;gBAEA;oBACI,aAAa;oBACb,SAAS;oBACT,mBAAmB;;oBAEnB;wBACI,eAAe;oBACnB;;oBAEA;wBACI;4BACI,WAAW;4BACX,YAAY;wBAChB;oBACJ;gBACJ;YACJ;QACJ;IACJ;;IAEA;QACI,aAAa;QACb,UAAU;QACV,YAAY;QACZ,kBAAkB;QAClB,sBAAsB;;QAEtB;YACI,mCAAmC;YACnC,eAAe;YACf,aAAa;YACb,8BAA8B;YAC9B,mBAAmB;;YAEnB;gBACI,aAAa;gBACb,mBAAmB;gBACnB,uBAAuB;gBACvB,eAAe;gBACf,kCAAkC;;gBAElC;oBACI;wBACI,iBAAiB;oBACrB;gBACJ;YACJ;QACJ;;QAEA;YACI,kBAAkB;YAClB,iBAAiB;YACjB,eAAe;QACnB;;QAEA;YACI,WAAW;YACX,iBAAiB;QACrB;IACJ;AACJ;;AAEA;IACI,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,2CAA2C;AAC/C","sourcesContent":["@font-face {\n    font-family: myThin;\n    src: url(\"./Assets/fonts/static/Inter-Thin.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: myBold;\n    src: url(\"./Assets/fonts/static/Inter-Bold.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: myRegular;\n    src: url(\"./Assets/fonts/static/Inter-Regular.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: myLight;\n    src: url(\"./Assets/fonts/static/Inter-Light.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: mySemiBold;\n    src: url(\"./Assets/fonts/static/Inter-SemiBold.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: myMedium;\n    src: url(\"./Assets/fonts/static/Inter-Medium.ttf\") format(\"truetype\");\n    font-weight: 600;\n    font-style: normal;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody::-webkit-scrollbar {\n    display: none;\n}\n\n.main {\n    height: 1700px;\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n\n    background-color: #d9d9d9;\n    font-family: myRegular, sans-serif;\n    color: #37414c;\n}\n\n.main::-webkit-scrollbar {\n    display: none;\n}\n\n.top {\n    flex: 0.1992;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-image: url(\"./Assets/Images/3.jpg\");\n    background-position: bottom;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n\n    .search-div {\n        position: relative;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n\n        .search {\n            outline: none;\n            border: none;\n            background-color: #f0f2f5;\n            width: 70%;\n            height: 82px;\n            border-radius: 46px;\n            padding: 0 60px;\n            font-size: 27px;\n        }\n\n        ::placeholder {\n            font-size: 27px;\n        }\n\n        .search-svg {\n            position: absolute;\n            top: 23%;\n            right: 18%;\n            cursor: pointer;\n            scale: 0.714;\n        }\n    }\n}\n\n.middle {\n    flex: 0.3871;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    .weather {\n        background-color: white;\n        width: min(95%, 1100px);\n        height: 80%;\n        border-radius: 42px;\n        box-shadow: 0 2px 5px rgb(0 0 0 / 20%);\n        display: grid;\n        grid-template-columns: 1fr 1.3fr;\n        grid-template-rows: 1fr 1fr;\n        padding: 0 30px;\n\n        @media (width <= 1100px) {\n            & {\n                padding: 0 3%;\n            }\n        }\n\n        .left {\n            grid-row: 1/ 2;\n            grid-column: 1/2;\n            display: grid;\n            grid-template-columns: 1fr 0.9fr;\n            margin-left: -27px;\n\n            @media (width <= 1100px) {\n                & {\n                    margin-left: -2.5vw;\n                }\n            }\n\n            .svg-container {\n                grid-area: \"svg\";\n                display: flex;\n                justify-content: center;\n                align-items: center;\n\n                .weather-svg {\n                    width: 195px;\n                    height: auto;\n\n                    @media (width <= 1100px) {\n                        & {\n                            width: 17.6vw;\n                            height: auto;\n                        }\n                    }\n                }\n            }\n\n            .temp-text {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n\n                .big {\n                    font-size: 100px;\n                    position: relative;\n                    margin-top: -30px;\n                    margin-left: -170px;\n                    min-width: 150px;\n                    display: flex;\n                    justify-content: end;\n\n                    @media (width <= 1100px) {\n                        & {\n                            margin-left: -7.5vw;\n                            font-size: 8.85vw;\n                        }\n                    }\n\n                    .degree {\n                        position: absolute;\n                        font-family: myLight, sans-serif;\n                        font-size: 40px;\n                        right: -20px;\n\n                        @media (width <= 1100px) {\n                            & {\n                                font-size: 3.54vw;\n                            }\n                        }\n                    }\n\n                    .unit {\n                        position: absolute;\n                        right: -50px;\n                        font-size: 48px;\n                        font-family: myLight, sans-serif;\n\n                        @media (width <= 1100px) {\n                            & {\n                                font-size: 4.25vw;\n                                right: -44%;\n                            }\n                        }\n                    }\n\n                    .c {\n                        width: 30px;\n                        height: auto;\n\n                        @media (width <= 1100px) {\n                            & {\n                                width: 2.65vw;\n                            }\n                        }\n                    }\n\n                    .feels {\n                        position: absolute;\n                        font-size: 25px;\n                        bottom: -28px;\n                        right: -50px;\n\n                        @media (width <= 1100px) {\n                            & {\n                                font-size: 2.21vw;\n                                right: -2.65;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        .right {\n            grid-row: 1 / 2;\n            grid-column: 2/ 3;\n            display: grid;\n            grid-template-columns: 3.83fr 1fr;\n            grid-template-rows: 1fr 1.5fr;\n            margin-left: 30px;\n\n            @media (width <= 1100px) {\n                & {\n                    margin-left: 2.65vw;\n                }\n            }\n\n            .place {\n                display: flex;\n                align-items: center;\n                font-family: myMedium, sans-serif;\n                font-size: 30px;\n                margin-bottom: -32px;\n\n                @media (width <= 1100px) {\n                    & {\n                        font-size: 2.65vw;\n                    }\n                }\n            }\n\n            .date {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 30px;\n                margin-bottom: -32px;\n\n                @media (width <= 1100px) {\n                    & {\n                        font-size: 2.65vw;\n                    }\n                }\n            }\n\n            .day-choice {\n                grid-column: 1 / 3;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                margin-top: -20px;\n\n                .day-container {\n                    width: 100%;\n                    height: 65px;\n                    display: grid;\n                    grid-template-columns: 1fr 1fr 1fr;\n                    background-color: #f0f2f5;\n                    border-radius: 54px;\n                    border: 1px #d9d9d9 solid;\n                    font-family: myRegular, sans-serif;\n                    font-size: 30px;\n\n                    @media (width <= 1100px) {\n                        & {\n                            font-size: 2.65vw;\n                        }\n                    }\n\n                    .today {\n                        border-right: 1px #d9d9d9 solid;\n                        width: 100%;\n                        height: 100%;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        border-radius: 54px;\n                        border-bottom-right-radius: 0;\n                        border-top-right-radius: 0;\n                        cursor: pointer;\n                        opacity: 0.9;\n                        transition: opacity 0.3s ease;\n                        transform: box-shadow 0.3s ease;\n\n                        &:hover {\n                            opacity: 1;\n                            box-shadow: 0 2.5px 5px 0 #1a181d1f;\n                        }\n                    }\n\n                    .picked {\n                        background-color: rgb(250, 158, 66);\n                    }\n\n                    .picked_night {\n                        background-color: rgb(165, 134, 252);\n                    }\n\n                    .tomorrow {\n                        border-right: 1px #d9d9d9 solid;\n                        width: 100%;\n                        height: 100%;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        cursor: pointer;\n                        opacity: 0.9;\n                        transition: opacity 0.3s ease;\n                        transform: box-shadow 0.3s ease;\n\n                        &:hover {\n                            opacity: 1;\n                            box-shadow: 0 2.5px 5px 0 #1a181d1f;\n                        }\n                    }\n\n                    .two-days {\n                        width: 100%;\n                        height: 100%;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        border-radius: 54px;\n                        border-bottom-left-radius: 0;\n                        border-top-left-radius: 0;\n                        cursor: pointer;\n                        opacity: 0.9;\n                        transition: opacity 0.3s ease;\n                        transform: box-shadow 0.3s ease;\n\n                        &:hover {\n                            opacity: 1;\n                            box-shadow: 0 2.5px 5px 0 #1a181d1f;\n                        }\n                    }\n                }\n            }\n        }\n\n        .display {\n            grid-row: 2 / 3;\n            grid-column: 1/ 3;\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr 1fr;\n            padding: 25px 20px 5px;\n            justify-items: center;\n            gap: 0;\n\n            @media (width <= 1100px) {\n                & {\n                    padding: 25px 2% 5px;\n                    margin-left: -2.7%;\n                }\n            }\n\n            .info {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                width: 220px;\n                height: 65px;\n\n                @media (width <= 1100px) {\n                    & {\n                        width: 73%;\n                    }\n                }\n\n                .info_svg_container {\n                    min-width: 65px;\n                    height: 85px;\n                    display: flex;\n                    justify-content: center;\n\n                    svg {\n                        grid-column: 1 / 2;\n                        grid-row: 1 / 3;\n                        max-width: 65px;\n\n                        /* height: auto; */\n                        max-height: 85px;\n\n                        @media (width <= 1100px) {\n                            & {\n                                width: 5.75vw;\n                                height: auto;\n                            }\n                        }\n                    }\n\n                    /* .min-svg,\n                    .max-svg {\n                        width: 40px;\n                        height: 80px;\n                    } */\n                }\n\n                .righter {\n                    width: 100%;\n                    padding-left: 10px;\n\n                    .title {\n                        grid-column: 2 / 3;\n                        align-self: center;\n                        font-family: myRegular, sans-serif;\n                        font-size: 25px;\n\n                        @media (width <= 1100px) {\n                            & {\n                                font-size: 2.21vw;\n                            }\n                        }\n                    }\n\n                    .number {\n                        grid-column: 2 / 3;\n                        align-self: self-start;\n                        font-family: myRegular, sans-serif;\n                        font-size: 25px;\n                        width: 100%;\n\n                        @media (width <= 1100px) {\n                            & {\n                                font-size: 2.21vw;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n.bottom {\n    flex: 0.4136;\n    display: flex;\n    height: 500px;\n    background-color: white;\n    position: relative;\n\n    .cities {\n        flex: 0.25;\n        padding: 40px 30px;\n        position: relative;\n\n        .country {\n            font-family: mySemiBold, sans-serif;\n            font-size: 30px;\n        }\n\n        .city_container {\n            padding: 30px 0;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n\n            .city {\n                background-color: #8080802e;\n                height: 55px;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 0 30px;\n                border-radius: 15px;\n                box-shadow: 0 2px 2px rgb(0 0 0 / 20%);\n\n                .city-name {\n                    font-family: mySemiBold, sans-serif;\n                    font-size: 20px;\n                }\n\n                .city-weather {\n                    display: flex;\n                    gap: 20px;\n                    align-items: center;\n\n                    .city-temp {\n                        font-size: 20px;\n                    }\n\n                    .city_svg_div {\n                        .city-svg {\n                            width: 40px;\n                            height: auto;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    .hourly {\n        display: flex;\n        flex: 0.75;\n        width: 500px;\n        padding: 40px 30px;\n        flex-direction: column;\n\n        .hourly-city {\n            font-family: mySemiBold, sans-serif;\n            font-size: 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n\n            .city-date {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 30px;\n                font-family: myRegular, sans-serif;\n\n                @media (width <= 1100px) {\n                    & {\n                        font-size: 2.65vw;\n                    }\n                }\n            }\n        }\n\n        .chart_container {\n            position: relative;\n            min-height: 740px;\n            min-width: 100%;\n        }\n\n        canvas {\n            width: 100%;\n            min-height: 740px;\n        }\n    }\n}\n\n.bottom::before {\n    content: \"\";\n    border: 1px solid #d9d9d9;\n    position: absolute;\n    left: 26.5%;\n    top: 110px;\n    bottom: -110px;\n}\n\n.random {\n    background-color: rgba(116, 66, 253, 0.686);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {



module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/flatbuffers/mjs/builder.js":
/*!*************************************************!*\
  !*** ./node_modules/flatbuffers/mjs/builder.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Builder: () => (/* binding */ Builder)
/* harmony export */ });
/* harmony import */ var _byte_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-buffer.js */ "./node_modules/flatbuffers/mjs/byte-buffer.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/flatbuffers/mjs/constants.js");


class Builder {
    /**
     * Create a FlatBufferBuilder.
     */
    constructor(opt_initial_size) {
        /** Minimum alignment encountered so far. */
        this.minalign = 1;
        /** The vtable for the current table. */
        this.vtable = null;
        /** The amount of fields we're actually using. */
        this.vtable_in_use = 0;
        /** Whether we are currently serializing a table. */
        this.isNested = false;
        /** Starting offset of the current struct/table. */
        this.object_start = 0;
        /** List of offsets of all vtables. */
        this.vtables = [];
        /** For the current vector being built. */
        this.vector_num_elems = 0;
        /** False omits default values from the serialized data */
        this.force_defaults = false;
        this.string_maps = null;
        this.text_encoder = new TextEncoder();
        let initial_size;
        if (!opt_initial_size) {
            initial_size = 1024;
        }
        else {
            initial_size = opt_initial_size;
        }
        /**
         * @type {ByteBuffer}
         * @private
         */
        this.bb = _byte_buffer_js__WEBPACK_IMPORTED_MODULE_0__.ByteBuffer.allocate(initial_size);
        this.space = initial_size;
    }
    clear() {
        this.bb.clear();
        this.space = this.bb.capacity();
        this.minalign = 1;
        this.vtable = null;
        this.vtable_in_use = 0;
        this.isNested = false;
        this.object_start = 0;
        this.vtables = [];
        this.vector_num_elems = 0;
        this.force_defaults = false;
        this.string_maps = null;
    }
    /**
     * In order to save space, fields that are set to their default value
     * don't get serialized into the buffer. Forcing defaults provides a
     * way to manually disable this optimization.
     *
     * @param forceDefaults true always serializes default values
     */
    forceDefaults(forceDefaults) {
        this.force_defaults = forceDefaults;
    }
    /**
     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
     * called finish(). The actual data starts at the ByteBuffer's current position,
     * not necessarily at 0.
     */
    dataBuffer() {
        return this.bb;
    }
    /**
     * Get the bytes representing the FlatBuffer. Only call this after you've
     * called finish().
     */
    asUint8Array() {
        return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
    }
    /**
     * Prepare to write an element of `size` after `additional_bytes` have been
     * written, e.g. if you write a string, you need to align such the int length
     * field is aligned to 4 bytes, and the string data follows it directly. If all
     * you need to do is alignment, `additional_bytes` will be 0.
     *
     * @param size This is the of the new element to write
     * @param additional_bytes The padding size
     */
    prep(size, additional_bytes) {
        // Track the biggest thing we've ever aligned to.
        if (size > this.minalign) {
            this.minalign = size;
        }
        // Find the amount of alignment needed such that `size` is properly
        // aligned after `additional_bytes`
        const align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);
        // Reallocate the buffer if needed.
        while (this.space < align_size + size + additional_bytes) {
            const old_buf_size = this.bb.capacity();
            this.bb = Builder.growByteBuffer(this.bb);
            this.space += this.bb.capacity() - old_buf_size;
        }
        this.pad(align_size);
    }
    pad(byte_size) {
        for (let i = 0; i < byte_size; i++) {
            this.bb.writeInt8(--this.space, 0);
        }
    }
    writeInt8(value) {
        this.bb.writeInt8(this.space -= 1, value);
    }
    writeInt16(value) {
        this.bb.writeInt16(this.space -= 2, value);
    }
    writeInt32(value) {
        this.bb.writeInt32(this.space -= 4, value);
    }
    writeInt64(value) {
        this.bb.writeInt64(this.space -= 8, value);
    }
    writeFloat32(value) {
        this.bb.writeFloat32(this.space -= 4, value);
    }
    writeFloat64(value) {
        this.bb.writeFloat64(this.space -= 8, value);
    }
    /**
     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
     * @param value The `int8` to add the buffer.
     */
    addInt8(value) {
        this.prep(1, 0);
        this.writeInt8(value);
    }
    /**
     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
     * @param value The `int16` to add the buffer.
     */
    addInt16(value) {
        this.prep(2, 0);
        this.writeInt16(value);
    }
    /**
     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
     * @param value The `int32` to add the buffer.
     */
    addInt32(value) {
        this.prep(4, 0);
        this.writeInt32(value);
    }
    /**
     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
     * @param value The `int64` to add the buffer.
     */
    addInt64(value) {
        this.prep(8, 0);
        this.writeInt64(value);
    }
    /**
     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
     * @param value The `float32` to add the buffer.
     */
    addFloat32(value) {
        this.prep(4, 0);
        this.writeFloat32(value);
    }
    /**
     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
     * @param value The `float64` to add the buffer.
     */
    addFloat64(value) {
        this.prep(8, 0);
        this.writeFloat64(value);
    }
    addFieldInt8(voffset, value, defaultValue) {
        if (this.force_defaults || value != defaultValue) {
            this.addInt8(value);
            this.slot(voffset);
        }
    }
    addFieldInt16(voffset, value, defaultValue) {
        if (this.force_defaults || value != defaultValue) {
            this.addInt16(value);
            this.slot(voffset);
        }
    }
    addFieldInt32(voffset, value, defaultValue) {
        if (this.force_defaults || value != defaultValue) {
            this.addInt32(value);
            this.slot(voffset);
        }
    }
    addFieldInt64(voffset, value, defaultValue) {
        if (this.force_defaults || value !== defaultValue) {
            this.addInt64(value);
            this.slot(voffset);
        }
    }
    addFieldFloat32(voffset, value, defaultValue) {
        if (this.force_defaults || value != defaultValue) {
            this.addFloat32(value);
            this.slot(voffset);
        }
    }
    addFieldFloat64(voffset, value, defaultValue) {
        if (this.force_defaults || value != defaultValue) {
            this.addFloat64(value);
            this.slot(voffset);
        }
    }
    addFieldOffset(voffset, value, defaultValue) {
        if (this.force_defaults || value != defaultValue) {
            this.addOffset(value);
            this.slot(voffset);
        }
    }
    /**
     * Structs are stored inline, so nothing additional is being added. `d` is always 0.
     */
    addFieldStruct(voffset, value, defaultValue) {
        if (value != defaultValue) {
            this.nested(value);
            this.slot(voffset);
        }
    }
    /**
     * Structures are always stored inline, they need to be created right
     * where they're used.  You'll get this assertion failure if you
     * created it elsewhere.
     */
    nested(obj) {
        if (obj != this.offset()) {
            throw new TypeError('FlatBuffers: struct must be serialized inline.');
        }
    }
    /**
     * Should not be creating any other object, string or vector
     * while an object is being constructed
     */
    notNested() {
        if (this.isNested) {
            throw new TypeError('FlatBuffers: object serialization must not be nested.');
        }
    }
    /**
     * Set the current vtable at `voffset` to the current location in the buffer.
     */
    slot(voffset) {
        if (this.vtable !== null)
            this.vtable[voffset] = this.offset();
    }
    /**
     * @returns Offset relative to the end of the buffer.
     */
    offset() {
        return this.bb.capacity() - this.space;
    }
    /**
     * Doubles the size of the backing ByteBuffer and copies the old data towards
     * the end of the new buffer (since we build the buffer backwards).
     *
     * @param bb The current buffer with the existing data
     * @returns A new byte buffer with the old data copied
     * to it. The data is located at the end of the buffer.
     *
     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
     * it a uint8Array we need to suppress the type check:
     * @suppress {checkTypes}
     */
    static growByteBuffer(bb) {
        const old_buf_size = bb.capacity();
        // Ensure we don't grow beyond what fits in an int.
        if (old_buf_size & 0xC0000000) {
            throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');
        }
        const new_buf_size = old_buf_size << 1;
        const nbb = _byte_buffer_js__WEBPACK_IMPORTED_MODULE_0__.ByteBuffer.allocate(new_buf_size);
        nbb.setPosition(new_buf_size - old_buf_size);
        nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
        return nbb;
    }
    /**
     * Adds on offset, relative to where it will be written.
     *
     * @param offset The offset to add.
     */
    addOffset(offset) {
        this.prep(_constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_INT, 0); // Ensure alignment is already done.
        this.writeInt32(this.offset() - offset + _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_INT);
    }
    /**
     * Start encoding a new object in the buffer.  Users will not usually need to
     * call this directly. The FlatBuffers compiler will generate helper methods
     * that call this method internally.
     */
    startObject(numfields) {
        this.notNested();
        if (this.vtable == null) {
            this.vtable = [];
        }
        this.vtable_in_use = numfields;
        for (let i = 0; i < numfields; i++) {
            this.vtable[i] = 0; // This will push additional elements as needed
        }
        this.isNested = true;
        this.object_start = this.offset();
    }
    /**
     * Finish off writing the object that is under construction.
     *
     * @returns The offset to the object inside `dataBuffer`
     */
    endObject() {
        if (this.vtable == null || !this.isNested) {
            throw new Error('FlatBuffers: endObject called without startObject');
        }
        this.addInt32(0);
        const vtableloc = this.offset();
        // Trim trailing zeroes.
        let i = this.vtable_in_use - 1;
        // eslint-disable-next-line no-empty
        for (; i >= 0 && this.vtable[i] == 0; i--) { }
        const trimmed_size = i + 1;
        // Write out the current vtable.
        for (; i >= 0; i--) {
            // Offset relative to the start of the table.
            this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
        }
        const standard_fields = 2; // The fields below:
        this.addInt16(vtableloc - this.object_start);
        const len = (trimmed_size + standard_fields) * _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_SHORT;
        this.addInt16(len);
        // Search for an existing vtable that matches the current one.
        let existing_vtable = 0;
        const vt1 = this.space;
        outer_loop: for (i = 0; i < this.vtables.length; i++) {
            const vt2 = this.bb.capacity() - this.vtables[i];
            if (len == this.bb.readInt16(vt2)) {
                for (let j = _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_SHORT; j < len; j += _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_SHORT) {
                    if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
                        continue outer_loop;
                    }
                }
                existing_vtable = this.vtables[i];
                break;
            }
        }
        if (existing_vtable) {
            // Found a match:
            // Remove the current vtable.
            this.space = this.bb.capacity() - vtableloc;
            // Point table to existing vtable.
            this.bb.writeInt32(this.space, existing_vtable - vtableloc);
        }
        else {
            // No match:
            // Add the location of the current vtable to the list of vtables.
            this.vtables.push(this.offset());
            // Point table to current vtable.
            this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
        }
        this.isNested = false;
        return vtableloc;
    }
    /**
     * Finalize a buffer, poiting to the given `root_table`.
     */
    finish(root_table, opt_file_identifier, opt_size_prefix) {
        const size_prefix = opt_size_prefix ? _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZE_PREFIX_LENGTH : 0;
        if (opt_file_identifier) {
            const file_identifier = opt_file_identifier;
            this.prep(this.minalign, _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_INT +
                _constants_js__WEBPACK_IMPORTED_MODULE_1__.FILE_IDENTIFIER_LENGTH + size_prefix);
            if (file_identifier.length != _constants_js__WEBPACK_IMPORTED_MODULE_1__.FILE_IDENTIFIER_LENGTH) {
                throw new TypeError('FlatBuffers: file identifier must be length ' +
                    _constants_js__WEBPACK_IMPORTED_MODULE_1__.FILE_IDENTIFIER_LENGTH);
            }
            for (let i = _constants_js__WEBPACK_IMPORTED_MODULE_1__.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
                this.writeInt8(file_identifier.charCodeAt(i));
            }
        }
        this.prep(this.minalign, _constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_INT + size_prefix);
        this.addOffset(root_table);
        if (size_prefix) {
            this.addInt32(this.bb.capacity() - this.space);
        }
        this.bb.setPosition(this.space);
    }
    /**
     * Finalize a size prefixed buffer, pointing to the given `root_table`.
     */
    finishSizePrefixed(root_table, opt_file_identifier) {
        this.finish(root_table, opt_file_identifier, true);
    }
    /**
     * This checks a required field has been set in a given table that has
     * just been constructed.
     */
    requiredField(table, field) {
        const table_start = this.bb.capacity() - table;
        const vtable_start = table_start - this.bb.readInt32(table_start);
        const ok = field < this.bb.readInt16(vtable_start) &&
            this.bb.readInt16(vtable_start + field) != 0;
        // If this fails, the caller will show what field needs to be set.
        if (!ok) {
            throw new TypeError('FlatBuffers: field ' + field + ' must be set');
        }
    }
    /**
     * Start a new array/vector of objects.  Users usually will not call
     * this directly. The FlatBuffers compiler will create a start/end
     * method for vector types in generated code.
     *
     * @param elem_size The size of each element in the array
     * @param num_elems The number of elements in the array
     * @param alignment The alignment of the array
     */
    startVector(elem_size, num_elems, alignment) {
        this.notNested();
        this.vector_num_elems = num_elems;
        this.prep(_constants_js__WEBPACK_IMPORTED_MODULE_1__.SIZEOF_INT, elem_size * num_elems);
        this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.
    }
    /**
     * Finish off the creation of an array and all its elements. The array must be
     * created with `startVector`.
     *
     * @returns The offset at which the newly created array
     * starts.
     */
    endVector() {
        this.writeInt32(this.vector_num_elems);
        return this.offset();
    }
    /**
     * Encode the string `s` in the buffer using UTF-8. If the string passed has
     * already been seen, we return the offset of the already written string
     *
     * @param s The string to encode
     * @return The offset in the buffer where the encoded string starts
     */
    createSharedString(s) {
        if (!s) {
            return 0;
        }
        if (!this.string_maps) {
            this.string_maps = new Map();
        }
        if (this.string_maps.has(s)) {
            return this.string_maps.get(s);
        }
        const offset = this.createString(s);
        this.string_maps.set(s, offset);
        return offset;
    }
    /**
     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
     * instead of a string, it is assumed to contain valid UTF-8 encoded data.
     *
     * @param s The string to encode
     * @return The offset in the buffer where the encoded string starts
     */
    createString(s) {
        if (s === null || s === undefined) {
            return 0;
        }
        let utf8;
        if (s instanceof Uint8Array) {
            utf8 = s;
        }
        else {
            utf8 = this.text_encoder.encode(s);
        }
        this.addInt8(0);
        this.startVector(1, utf8.length, 1);
        this.bb.setPosition(this.space -= utf8.length);
        for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {
            bytes[offset++] = utf8[i];
        }
        return this.endVector();
    }
    /**
     * A helper function to pack an object
     *
     * @returns offset of obj
     */
    createObjectOffset(obj) {
        if (obj === null) {
            return 0;
        }
        if (typeof obj === 'string') {
            return this.createString(obj);
        }
        else {
            return obj.pack(this);
        }
    }
    /**
     * A helper function to pack a list of object
     *
     * @returns list of offsets of each non null object
     */
    createObjectOffsetList(list) {
        const ret = [];
        for (let i = 0; i < list.length; ++i) {
            const val = list[i];
            if (val !== null) {
                ret.push(this.createObjectOffset(val));
            }
            else {
                throw new TypeError('FlatBuffers: Argument for createObjectOffsetList cannot contain null.');
            }
        }
        return ret;
    }
    createStructOffsetList(list, startFunc) {
        startFunc(this, list.length);
        this.createObjectOffsetList(list.slice().reverse());
        return this.endVector();
    }
}


/***/ }),

/***/ "./node_modules/flatbuffers/mjs/byte-buffer.js":
/*!*****************************************************!*\
  !*** ./node_modules/flatbuffers/mjs/byte-buffer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ByteBuffer: () => (/* binding */ ByteBuffer)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/flatbuffers/mjs/constants.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/flatbuffers/mjs/utils.js");
/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding.js */ "./node_modules/flatbuffers/mjs/encoding.js");



class ByteBuffer {
    /**
     * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)
     */
    constructor(bytes_) {
        this.bytes_ = bytes_;
        this.position_ = 0;
        this.text_decoder_ = new TextDecoder();
    }
    /**
     * Create and allocate a new ByteBuffer with a given size.
     */
    static allocate(byte_size) {
        return new ByteBuffer(new Uint8Array(byte_size));
    }
    clear() {
        this.position_ = 0;
    }
    /**
     * Get the underlying `Uint8Array`.
     */
    bytes() {
        return this.bytes_;
    }
    /**
     * Get the buffer's position.
     */
    position() {
        return this.position_;
    }
    /**
     * Set the buffer's position.
     */
    setPosition(position) {
        this.position_ = position;
    }
    /**
     * Get the buffer's capacity.
     */
    capacity() {
        return this.bytes_.length;
    }
    readInt8(offset) {
        return this.readUint8(offset) << 24 >> 24;
    }
    readUint8(offset) {
        return this.bytes_[offset];
    }
    readInt16(offset) {
        return this.readUint16(offset) << 16 >> 16;
    }
    readUint16(offset) {
        return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
    }
    readInt32(offset) {
        return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
    }
    readUint32(offset) {
        return this.readInt32(offset) >>> 0;
    }
    readInt64(offset) {
        return BigInt.asIntN(64, BigInt(this.readUint32(offset)) + (BigInt(this.readUint32(offset + 4)) << BigInt(32)));
    }
    readUint64(offset) {
        return BigInt.asUintN(64, BigInt(this.readUint32(offset)) + (BigInt(this.readUint32(offset + 4)) << BigInt(32)));
    }
    readFloat32(offset) {
        _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32[0] = this.readInt32(offset);
        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.float32[0];
    }
    readFloat64(offset) {
        _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32[_utils_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian ? 0 : 1] = this.readInt32(offset);
        _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32[_utils_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.float64[0];
    }
    writeInt8(offset, value) {
        this.bytes_[offset] = value;
    }
    writeUint8(offset, value) {
        this.bytes_[offset] = value;
    }
    writeInt16(offset, value) {
        this.bytes_[offset] = value;
        this.bytes_[offset + 1] = value >> 8;
    }
    writeUint16(offset, value) {
        this.bytes_[offset] = value;
        this.bytes_[offset + 1] = value >> 8;
    }
    writeInt32(offset, value) {
        this.bytes_[offset] = value;
        this.bytes_[offset + 1] = value >> 8;
        this.bytes_[offset + 2] = value >> 16;
        this.bytes_[offset + 3] = value >> 24;
    }
    writeUint32(offset, value) {
        this.bytes_[offset] = value;
        this.bytes_[offset + 1] = value >> 8;
        this.bytes_[offset + 2] = value >> 16;
        this.bytes_[offset + 3] = value >> 24;
    }
    writeInt64(offset, value) {
        this.writeInt32(offset, Number(BigInt.asIntN(32, value)));
        this.writeInt32(offset + 4, Number(BigInt.asIntN(32, value >> BigInt(32))));
    }
    writeUint64(offset, value) {
        this.writeUint32(offset, Number(BigInt.asUintN(32, value)));
        this.writeUint32(offset + 4, Number(BigInt.asUintN(32, value >> BigInt(32))));
    }
    writeFloat32(offset, value) {
        _utils_js__WEBPACK_IMPORTED_MODULE_1__.float32[0] = value;
        this.writeInt32(offset, _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32[0]);
    }
    writeFloat64(offset, value) {
        _utils_js__WEBPACK_IMPORTED_MODULE_1__.float64[0] = value;
        this.writeInt32(offset, _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32[_utils_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian ? 0 : 1]);
        this.writeInt32(offset + 4, _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32[_utils_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian ? 1 : 0]);
    }
    /**
     * Return the file identifier.   Behavior is undefined for FlatBuffers whose
     * schema does not include a file_identifier (likely points at padding or the
     * start of a the root vtable).
     */
    getBufferIdentifier() {
        if (this.bytes_.length < this.position_ + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_INT +
            _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILE_IDENTIFIER_LENGTH) {
            throw new Error('FlatBuffers: ByteBuffer is too short to contain an identifier.');
        }
        let result = "";
        for (let i = 0; i < _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILE_IDENTIFIER_LENGTH; i++) {
            result += String.fromCharCode(this.readInt8(this.position_ + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_INT + i));
        }
        return result;
    }
    /**
     * Look up a field in the vtable, return an offset into the object, or 0 if the
     * field is not present.
     */
    __offset(bb_pos, vtable_offset) {
        const vtable = bb_pos - this.readInt32(bb_pos);
        return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
    }
    /**
     * Initialize any Table-derived type to point to the union at the given offset.
     */
    __union(t, offset) {
        t.bb_pos = offset + this.readInt32(offset);
        t.bb = this;
        return t;
    }
    /**
     * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
     * This allocates a new string and converts to wide chars upon each access.
     *
     * To avoid the conversion to string, pass Encoding.UTF8_BYTES as the
     * "optionalEncoding" argument. This is useful for avoiding conversion when
     * the data will just be packaged back up in another FlatBuffer later on.
     *
     * @param offset
     * @param opt_encoding Defaults to UTF16_STRING
     */
    __string(offset, opt_encoding) {
        offset += this.readInt32(offset);
        const length = this.readInt32(offset);
        offset += _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_INT;
        const utf8bytes = this.bytes_.subarray(offset, offset + length);
        if (opt_encoding === _encoding_js__WEBPACK_IMPORTED_MODULE_2__.Encoding.UTF8_BYTES)
            return utf8bytes;
        else
            return this.text_decoder_.decode(utf8bytes);
    }
    /**
     * Handle unions that can contain string as its member, if a Table-derived type then initialize it,
     * if a string then return a new one
     *
     * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this
     * makes the behaviour of __union_with_string different compared to __union
     */
    __union_with_string(o, offset) {
        if (typeof o === 'string') {
            return this.__string(offset);
        }
        return this.__union(o, offset);
    }
    /**
     * Retrieve the relative offset stored at "offset"
     */
    __indirect(offset) {
        return offset + this.readInt32(offset);
    }
    /**
     * Get the start of data of a vector whose offset is stored at "offset" in this object.
     */
    __vector(offset) {
        return offset + this.readInt32(offset) + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_INT; // data starts after the length
    }
    /**
     * Get the length of a vector whose offset is stored at "offset" in this object.
     */
    __vector_len(offset) {
        return this.readInt32(offset + this.readInt32(offset));
    }
    __has_identifier(ident) {
        if (ident.length != _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILE_IDENTIFIER_LENGTH) {
            throw new Error('FlatBuffers: file identifier must be length ' +
                _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILE_IDENTIFIER_LENGTH);
        }
        for (let i = 0; i < _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILE_IDENTIFIER_LENGTH; i++) {
            if (ident.charCodeAt(i) != this.readInt8(this.position() + _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_INT + i)) {
                return false;
            }
        }
        return true;
    }
    /**
     * A helper function for generating list for obj api
     */
    createScalarList(listAccessor, listLength) {
        const ret = [];
        for (let i = 0; i < listLength; ++i) {
            const val = listAccessor(i);
            if (val !== null) {
                ret.push(val);
            }
        }
        return ret;
    }
    /**
     * A helper function for generating list for obj api
     * @param listAccessor function that accepts an index and return data at that index
     * @param listLength listLength
     * @param res result list
     */
    createObjList(listAccessor, listLength) {
        const ret = [];
        for (let i = 0; i < listLength; ++i) {
            const val = listAccessor(i);
            if (val !== null) {
                ret.push(val.unpack());
            }
        }
        return ret;
    }
}


/***/ }),

/***/ "./node_modules/flatbuffers/mjs/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/flatbuffers/mjs/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FILE_IDENTIFIER_LENGTH: () => (/* binding */ FILE_IDENTIFIER_LENGTH),
/* harmony export */   SIZEOF_INT: () => (/* binding */ SIZEOF_INT),
/* harmony export */   SIZEOF_SHORT: () => (/* binding */ SIZEOF_SHORT),
/* harmony export */   SIZE_PREFIX_LENGTH: () => (/* binding */ SIZE_PREFIX_LENGTH)
/* harmony export */ });
const SIZEOF_SHORT = 2;
const SIZEOF_INT = 4;
const FILE_IDENTIFIER_LENGTH = 4;
const SIZE_PREFIX_LENGTH = 4;


/***/ }),

/***/ "./node_modules/flatbuffers/mjs/encoding.js":
/*!**************************************************!*\
  !*** ./node_modules/flatbuffers/mjs/encoding.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Encoding: () => (/* binding */ Encoding)
/* harmony export */ });
var Encoding;
(function (Encoding) {
    Encoding[Encoding["UTF8_BYTES"] = 1] = "UTF8_BYTES";
    Encoding[Encoding["UTF16_STRING"] = 2] = "UTF16_STRING";
})(Encoding || (Encoding = {}));


/***/ }),

/***/ "./node_modules/flatbuffers/mjs/flatbuffers.js":
/*!*****************************************************!*\
  !*** ./node_modules/flatbuffers/mjs/flatbuffers.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Builder: () => (/* reexport safe */ _builder_js__WEBPACK_IMPORTED_MODULE_3__.Builder),
/* harmony export */   ByteBuffer: () => (/* reexport safe */ _byte_buffer_js__WEBPACK_IMPORTED_MODULE_4__.ByteBuffer),
/* harmony export */   Encoding: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_2__.Encoding),
/* harmony export */   FILE_IDENTIFIER_LENGTH: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.FILE_IDENTIFIER_LENGTH),
/* harmony export */   SIZEOF_INT: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_INT),
/* harmony export */   SIZEOF_SHORT: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZEOF_SHORT),
/* harmony export */   SIZE_PREFIX_LENGTH: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.SIZE_PREFIX_LENGTH),
/* harmony export */   float32: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.float32),
/* harmony export */   float64: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.float64),
/* harmony export */   int32: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.int32),
/* harmony export */   isLittleEndian: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/flatbuffers/mjs/constants.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/flatbuffers/mjs/utils.js");
/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding.js */ "./node_modules/flatbuffers/mjs/encoding.js");
/* harmony import */ var _builder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./builder.js */ "./node_modules/flatbuffers/mjs/builder.js");
/* harmony import */ var _byte_buffer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./byte-buffer.js */ "./node_modules/flatbuffers/mjs/byte-buffer.js");










/***/ }),

/***/ "./node_modules/flatbuffers/mjs/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/flatbuffers/mjs/utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   float32: () => (/* binding */ float32),
/* harmony export */   float64: () => (/* binding */ float64),
/* harmony export */   int32: () => (/* binding */ int32),
/* harmony export */   isLittleEndian: () => (/* binding */ isLittleEndian)
/* harmony export */ });
const int32 = new Int32Array(2);
const float32 = new Float32Array(int32.buffer);
const float64 = new Float64Array(int32.buffer);
const isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;


/***/ }),

/***/ "./node_modules/openmeteo/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/openmeteo/lib/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fetchWeatherApi = void 0;
const flatbuffers_1 = __webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/mjs/flatbuffers.js");
const weather_api_response_1 = __webpack_require__(/*! @openmeteo/sdk/weather-api-response */ "./node_modules/@openmeteo/sdk/weather-api-response.js");
const sleep = (ms) => new Promise(r => setTimeout(r, ms));
function fetchRetried(url, retries = 3, backoffFactor = 0.5, backoffMax = 2) {
    return __awaiter(this, void 0, void 0, function* () {
        const statusToRetry = [500, 502, 504];
        const statusWithJsonError = [400, 429];
        let currentTry = 0;
        let response = yield fetch(url);
        while (statusToRetry.includes(response.status)) {
            currentTry++;
            if (currentTry >= retries) {
                throw new Error(response.statusText);
            }
            const sleepMs = Math.min(backoffFactor * Math.pow(2, currentTry), backoffMax) * 1000;
            yield sleep(sleepMs);
            response = yield fetch(url);
        }
        if (statusWithJsonError.includes(response.status)) {
            const json = yield response.json();
            if ('reason' in json) {
                throw new Error(json.reason);
            }
            throw new Error(response.statusText);
        }
        return response;
    });
}
/**
 * Retrieve data from the Open-Meteo weather API
 *
 * @param {string} url Server and endpoint. E.g. "https://api.open-meteo.com/v1/forecast"
 * @param {any} params URL parameter as an object
 * @param {number} [retries=3] Number of retries in case of an server error
 * @param {number} [backoffFactor=0.2] Exponential backoff factor to increase wait time after each retry
 * @param {number} [backoffMax=2] Maximum wait time between retries
 * @returns {Promise<WeatherApiResponse[]>}
 */
function fetchWeatherApi(url, params, retries = 3, backoffFactor = 0.2, backoffMax = 2) {
    return __awaiter(this, void 0, void 0, function* () {
        const urlParams = new URLSearchParams(params);
        urlParams.set('format', 'flatbuffers');
        const response = yield fetchRetried(`${url}?${urlParams.toString()}`, retries, backoffFactor, backoffMax);
        const fb = new flatbuffers_1.ByteBuffer(new Uint8Array(yield response.arrayBuffer()));
        const results = [];
        let pos = 0;
        while (pos < fb.capacity()) {
            fb.setPosition(pos);
            const len = fb.readInt32(fb.position());
            results.push(weather_api_response_1.WeatherApiResponse.getSizePrefixedRootAsWeatherApiResponse(fb));
            pos += len + 4;
        }
        return results;
    });
}
exports.fetchWeatherApi = fetchWeatherApi;


/***/ }),

/***/ "./src/style.css":
/*!***********************!*\
  !*** ./src/style.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./style.css */ "./node_modules/css-loader/dist/cjs.js!./src/style.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/cityChanger.js":
/*!****************************!*\
  !*** ./src/cityChanger.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cityChanger)
/* harmony export */ });
/* harmony import */ var _cityFetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cityFetch */ "./src/cityFetch.js");
/* harmony import */ var _weatherDescriptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./weatherDescriptions */ "./src/weatherDescriptions.js");
/* harmony import */ var _cityWeatherFetcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cityWeatherFetcher */ "./src/cityWeatherFetcher.js");
/* harmony import */ var _weather_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./weather_api */ "./src/weather_api.js");





const weatherDescriptions = (0,_weatherDescriptions__WEBPACK_IMPORTED_MODULE_1__["default"])().weatherDescriptions;
const city_container = document.querySelector(".city_container");

async function cityChanger(obj, weather, day, place) {
    try {
        let weather = await (0,_weather_api__WEBPACK_IMPORTED_MODULE_3__["default"])(place, day);
        let country_name = weather.country.split(" ")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ");
        if (country_name == 'United States Of America') {
            country_name = 'United States';
        } else if (country_name == 'Russia') {
            country_name = 'Russian Federation';
        }
      let cities = await (0,_cityFetch__WEBPACK_IMPORTED_MODULE_0__["default"])(country_name);
      let cities_div = city_container.children;
      let count = 0;
      let city_name;
      for (const city of cities_div) {
        city_name = cities[count];
        city.firstElementChild.textContent = city_name;
        let place = city_name.split(" ").join("-");
        if (place == 'Jima') {
            place = 'jimma';
        } else if (place == "Mekele") {
            place = "Mek'ele";
        }
        let weather = await (0,_weather_api__WEBPACK_IMPORTED_MODULE_3__["default"])(place, day);
        try {
          let obj = await (0,_cityWeatherFetcher__WEBPACK_IMPORTED_MODULE_2__["default"])(city_name, day);
          city.lastElementChild.firstElementChild.textContent = obj.text;
          city.lastElementChild.lastElementChild.firstElementChild.src = weatherDescriptions[weather.condition][weather.day_night];
  
        } catch (e) {
          city.lastElementChild.firstElementChild.textContent = `${21}° C`;
          console.error('its ok if you forget about this,', e)
        }
  
        count++;
      }
    } catch (e) {
        console.error("caught error", e);
    }
    
  }

/***/ }),

/***/ "./src/cityFetch.js":
/*!**************************!*\
  !*** ./src/cityFetch.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cityFetch)
/* harmony export */ });
/* harmony import */ var _weatherDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weatherDescriptions */ "./src/weatherDescriptions.js");


let isoCountries = (0,_weatherDescriptions__WEBPACK_IMPORTED_MODULE_0__["default"])().isoCountries; 

async function cityFetch(country_name) {
    try {
      let country;
      if (isoCountries.hasOwnProperty(country_name)) {
        country = isoCountries[country_name];
      } else {
        country = "ET";
      }
      const response = await fetch(
        `https://api.api-ninjas.com/v1/city?country=${country}&max_population=1000000&limit=12`,
        {
          headers: {
            "X-Api-Key": "2YWvqd6ZqrsZU3mx1Or1XQ==jMW5CbQDju47ASVz",
          },
        }
      );
  
      if (!response.ok) {
        throw new Error("Network response was not OK");
      }
  
      const citiesjson = await response.json();
      let cities = [];
      for (let city of citiesjson) {
        cities.push(city.name);
      }
      return cities;
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }

/***/ }),

/***/ "./src/cityWeatherFetcher.js":
/*!***********************************!*\
  !*** ./src/cityWeatherFetcher.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cityWeatherFetcher)
/* harmony export */ });
async function cityWeatherFetcher(name,day = 0) {
    try {
      let location = name.split(" ").join("-");
      let city_weather = await fetch(
        `https://api.weatherapi.com/v1/forecast.json?key=44b21494fc7747369bb71227242602&q=${location}&days=3`,
        {
          mode: "cors",
        }
      );
      let responseForcastJson = await city_weather.json();
  
      let date = new Date();
      let hour = date.getHours();
      let text;
  
      let temp_c = Math.round(responseForcastJson.forecast.forecastday[day].hour[hour].temp_c).toString();
      let condition = responseForcastJson.forecast.forecastday[day].hour[hour].condition.code;
  
      if (!city_weather.ok) {
        text = `27° C`;
        return {
          text,
          condition
        };
      } else {
        text = `${temp_c}° C`
        return {
          text,
          condition
        };
      }
    } catch (e) {
      console.error('the error is', e)
      return {
        text: `27° C`
      };
    }
  }

/***/ }),

/***/ "./src/dateChange.js":
/*!***************************!*\
  !*** ./src/dateChange.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ dateChange)
/* harmony export */ });
const city_date = document.querySelector(".city_date");
const city_title = document.querySelector(".cities_title");
const country = document.querySelector('.country');
const date = document.querySelector(".date");

async function dateChange(obj, weather, day) {
    const today = new Date();
  
      let day_now = today.getDate();
      let month = today.getMonth();
      let year = today.getFullYear();
  
      date.textContent = `${day_now + day}/${month}/${year}`;
      city_date.textContent = `${day_now + day}/${month}/${year}`;
      let capital_name = obj
        .name()
        .split(" ")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");
      city_title.textContent = `Hourly Tempratures of ${capital_name}`;
      country.textContent = `${weather.country} Cities`;
  }

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.css */ "./src/style.css");
/* harmony import */ var _svgs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svgs */ "./src/svgs.js");
/* harmony import */ var _update__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./update */ "./src/update.js");
/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./print */ "./src/print.js");





(0,_svgs__WEBPACK_IMPORTED_MODULE_1__["default"])();document.querySelector('.big');

const search = document.querySelector('.search');
const search_svg = document.querySelector('.search-svg');
const big_number = document.querySelector('.big_num');
const feels_like = document.querySelector('.feels');
const place = document.querySelector('.place');
const humidity = document.querySelector('.humidity .number');
const pressure = document.querySelector('.pressure .number');
const uv = document.querySelector('.uv .number');
const wind = document.querySelector('.wind .number');
const max = document.querySelector('.maxNum');
const min = document.querySelector('.minNum');
const precipitation = document.querySelector('.precipitation .number');
const rain = document.querySelector('.rain .number');
const today = document.querySelector('.today');
const tommorow = document.querySelector('.tomorrow');
const two_days = document.querySelector('.two-days');
let day_night;

const divObj = {
    big_number,
    feels_like,
    place,
    humidity,
    pressure,
    uv,
    wind,
    max,
    min,
    precipitation,
    rain,
    name : () => {
        if (search.value == "") {
            return "addis ababa";
        } else {
            return search.value
        }
    }
}

;(0,_print__WEBPACK_IMPORTED_MODULE_3__["default"])(7.05, 38.47, 0);
(0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj, 0);

search.addEventListener('keydown', async (event) => {
    let name = search.value;
    if (event.keyCode === 13) {
        today.classList.remove('picked');
        today.classList.remove('picked_night');
        tommorow.classList.remove('picked');
        tommorow.classList.remove('picked_night');
        two_days.classList.remove('picked');
        two_days.classList.remove('picked_night');
        let day_night = await (0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj).then();
        if (day_night == 0) {
            today.classList.add('picked');
        } else {
            today.classList.add('picked_night');
        }
    }
})

search_svg.addEventListener('click', async () => {
    let name = search.value;
    today.classList.remove('picked');
        today.classList.remove('picked_night');
        tommorow.classList.remove('picked');
        tommorow.classList.remove('picked_night');
        two_days.classList.remove('picked');
        two_days.classList.remove('picked_night');
        let day_night = await (0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj).then();
        if (day_night == 0) {
            today.classList.add('picked');
        } else {
            today.classList.add('picked_night');
        }
    (0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj);
})

today.addEventListener('click', () => {
    if (!today.classList.contains('picked')){
        today.classList.add('picked');
        tommorow.classList.remove('picked');
        tommorow.classList.remove('picked_night');
        two_days.classList.remove('picked');
        two_days.classList.remove('picked_night');
        (0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj, 0);

    }
})

tommorow.addEventListener('click', () => {
    if (!tommorow.classList.contains('picked')){
        today.classList.remove('picked');
        today.classList.remove('picked_night');
        tommorow.classList.add('picked');
        two_days.classList.remove('picked');
        two_days.classList.remove('picked_night');
        (0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj, 1);
    }
})

two_days.addEventListener('click', () => {
    if (!two_days.classList.contains('picked')){
        today.classList.remove('picked');
        today.classList.remove('picked_night');
        tommorow.classList.remove('picked');
        tommorow.classList.remove('picked_night');
        two_days.classList.add('picked');
        (0,_update__WEBPACK_IMPORTED_MODULE_2__["default"])(divObj, 2);
    }
})





/***/ }),

/***/ "./src/print.js":
/*!**********************!*\
  !*** ./src/print.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ grapher),
/* harmony export */   destroy: () => (/* binding */ destroy)
/* harmony export */ });
const ctx = document.getElementById("chart");
let c;
async function grapher(latitude, longitude, day, day_night) {
	const temps = await getDaily(latitude, longitude);
	const dayTemp = temps[day];
  let color = day_night == 0 ? "rgb(250, 158, 66)" : 'rgb(113,63,253)';

	c = new Chart(ctx, {
	  type: "line",
	  data: {
		labels: [
		  "12AM",
		  "1AM",
		  "2AM",
		  "3AM",
		  "4AM",
		  "5AM",
		  "6AM",
		  "7AM",
		  "8AM",
		  "9AM",
		  "10AM",
		  "11AM",
		  "12PM",
		  "1PM",
		  "2PM",
		  "3PM",
		  "4PM",
		  "5PM",
		  "6PM",
		  "7PM",
		  "8PM",
		  "9PM",
		  "10PM",
		  "11PM",
		],
		datasets: [
		  {
			label: "Temp in C°",
			data: dayTemp,
      borderColor: color,
			borderWidth: 1,
		  },
		],
	  },
	  options: {
		scales: {
		  y: {
			beginAtZero: true,
		  },
		},
	  },
	});


  }

function destroy() {
  c.destroy()
}
  

async function getDaily(latitude, longitude) {
  try {
	let days = [];
    const fetchWeatherApi = (__webpack_require__(/*! openmeteo */ "./node_modules/openmeteo/lib/index.js").fetchWeatherApi);
    const params = {
      latitude: latitude,
      longitude: longitude,
      hourly: "temperature_2m",
    };
    const url = "https://api.open-meteo.com/v1/forecast";

    const responses = await fetchWeatherApi(url, params);

    // Helper function to form time ranges
    const range = (start, stop, step) =>
      Array.from({ length: (stop - start) / step }, (_, i) => start + i * step);
    // Process first location. Add a for-loop for multiple locations or weather models
    const response = responses[0];
    // Attributes for timezone and location
    const utcOffsetSeconds = response.utcOffsetSeconds();
    const timezone = response.timezone();
    const timezoneAbbreviation = response.timezoneAbbreviation();
    //const latitude = response.latitude();
    //const longitude = response.longitude();
    const hourly = response.hourly();
    // Note: The order of weather variables in the URL query and the indices below need to match!
    const weatherData = {
      hourly: {
        time: range(
          Number(hourly.time()),
          Number(hourly.timeEnd()),
          hourly.interval()
        ).map((t) => new Date((t + utcOffsetSeconds) * 1000)),
        temperature2m: hourly.variables(0).valuesArray(),
      },
    };
    // `weatherData` now contains a simple structure with arrays for datetime and weather data

    let day = [];
    let count = 0;
    let dayno = 0;
    for (let i = 0; i < weatherData.hourly.time.length; i++) {
      if (dayno >= 3) {
        break;
      }
      if (count < 24) {
        day.push(weatherData.hourly.temperature2m[i].toFixed(2));
        count++;
      } else {
        count = 0;
        dayno++;
        //days.push(day);
        days.push(day);
        day = [];
        day.push(weatherData.hourly.temperature2m[i].toFixed(2));
        count++;
      }
    }

    return days;
  } catch (e) {
    console.error("error during hour fetch", e);
  }
}


/***/ }),

/***/ "./src/svgs.js":
/*!*********************!*\
  !*** ./src/svgs.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ svgCreater)
/* harmony export */ });
/* harmony import */ var _Assets_Images_c_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assets/Images/c.svg */ "./src/Assets/Images/c.svg");
/* harmony import */ var _Assets_Images_weather_icons_rainy_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Assets/Images/weather_icons_rainy.png */ "./src/Assets/Images/weather_icons_rainy.png");



function svgCreater(
    link = "//cdn.weatherapi.com/weather/64x64/day/113.png"
) {
    const svg_container = document.querySelector(".svg-container");
    const unit = document.querySelector(".unit");
    const city_svgs = document.querySelectorAll(".city_svg_div");
    const cSvg = new Image();
    cSvg.src = _Assets_Images_c_svg__WEBPACK_IMPORTED_MODULE_0__;
    cSvg.classList.add("c");
    unit.appendChild(cSvg);

    city_svgs.forEach((city_svg_div) => {
        let city_svg = new Image();
        city_svg.src = _Assets_Images_weather_icons_rainy_png__WEBPACK_IMPORTED_MODULE_1__;
        city_svg.classList.add("city-svg");
        city_svg_div.appendChild(city_svg);
    });
}


/***/ }),

/***/ "./src/textChange.js":
/*!***************************!*\
  !*** ./src/textChange.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ textChange)
/* harmony export */ });
/* harmony import */ var _weatherDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weatherDescriptions */ "./src/weatherDescriptions.js");


const weatherDescriptions = (0,_weatherDescriptions__WEBPACK_IMPORTED_MODULE_0__["default"])().weatherDescriptions;
const svg_container = document.querySelector(".svg-container");

async function textChange(obj, weather, day) {
    obj.big_number.textContent = weather.temp_c;
      obj.feels_like.textContent = `feels like ${weather.feelslike_c}`;
      obj.place.textContent = `${weather.name}, ${weather.country}`;
      obj.humidity.textContent = `${weather.humidity}%`;
      obj.pressure.textContent = `${weather.pressure}mb`;
  
      let uvNum = weather.uv;
      if (uvNum < 3) {
        obj.uv.textContent = `${uvNum} L`;
      } else if (uvNum < 6) {
        obj.uv.textContent = `${uvNum} M`;
      } else if (uvNum < 8) {
        obj.uv.textContent = `${uvNum} H`;
      } else if (uvNum < 11) {
        obj.uv.textContent = `${uvNum} VH`;
      } else {
        obj.uv.textContent = `${uvNum} EH`;
      }
      obj.wind.textContent = `${weather.wind} km/hr`;
      obj.max.textContent = `${weather.max}`;
      obj.min.textContent = `${weather.min}`;
      obj.precipitation.textContent = `${weather.precipitation} mm`;
      obj.rain.textContent = `${weather.rain} %`;
  
      const mySvg = new Image();
      mySvg.classList.add("weather-svg");
      let imageSrc = await weatherDescriptions[weather.condition][weather.day_night];
      mySvg.src = imageSrc;
      svg_container.innerHTML = "";
      svg_container.appendChild(mySvg);
  }

/***/ }),

/***/ "./src/update.js":
/*!***********************!*\
  !*** ./src/update.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ update)
/* harmony export */ });
/* harmony import */ var _weather_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weather_api */ "./src/weather_api.js");
/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./print */ "./src/print.js");
/* harmony import */ var _cityChanger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cityChanger */ "./src/cityChanger.js");
/* harmony import */ var _dateChange__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dateChange */ "./src/dateChange.js");
/* harmony import */ var _textChange__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textChange */ "./src/textChange.js");








const picker = document.querySelector('.picked');
const paths = document.querySelectorAll('path');
const uv_path = document.querySelector('.uv path');
const max_path = document.querySelector('.max path');
const min_path = document.querySelector('.min path');
const precipitation_path = document.querySelector('.precipitation path');
const rain_paths = document.querySelectorAll('.rain path');



async function update(obj, day = 0) {
  try {
    let place = obj.name();
    let weather = await (0,_weather_api__WEBPACK_IMPORTED_MODULE_0__["default"])(place, day);
    let day_night = weather.day_night; 
    (0,_textChange__WEBPACK_IMPORTED_MODULE_4__["default"])(obj, weather, day);
    (0,_dateChange__WEBPACK_IMPORTED_MODULE_3__["default"])(obj, weather, day);
    (0,_cityChanger__WEBPACK_IMPORTED_MODULE_2__["default"])(obj, weather,day, place);
    colorChanger(weather)
    ;(0,_print__WEBPACK_IMPORTED_MODULE_1__.destroy)();
    (0,_print__WEBPACK_IMPORTED_MODULE_1__["default"])(weather.latitude, weather.longitude, day, day_night);
    console.log("actual day and night", day_night)


    return day_night;
  } catch (e) {
    console.error("caught error", e);
  }
}

function colorChanger(weather) {
  let pickers = document.querySelectorAll('.picked');
  pickers.forEach(picker => {
    if (weather.day_night == 1) {
      picker.classList.remove('picked');
      picker.classList.add('picked_night');
    }
  })



  paths.forEach(svg => {
    if (weather.day_night == 1) {
      svg.style.stroke = 'rgb(165, 134, 252)';
      uv_path.style.fill =  'rgb(165, 134, 252)';
      max_path.style.fill =  'rgb(165, 134, 252)';
      min_path.style.fill =  'rgb(165, 134, 252)';
      precipitation_path.style.fill =  'rgb(165, 134, 252)';
      
    } else {
      svg.style.stroke = 'rgb(250,180,81)';
      uv_path.style.fill =  'rgb(250,180,81)';
      max_path.style.fill =  'rgb(250,180,81)';
      min_path.style.fill =  'rgb(250,180,81)';
      precipitation_path.style.fill =  'rgb(250,180,81)';
      
    }
    
  })

  rain_paths.forEach(path => {
    if (weather.day_night == 1) {
      path.style.fill =  'rgb(165, 134, 252)';
    } else {
      path.style.fill =  'rgb(250,180,81)'; 
    }
  })
  
}

/***/ }),

/***/ "./src/weatherDescriptions.js":
/*!************************************!*\
  !*** ./src/weatherDescriptions.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ objects),
/* harmony export */   weatherDescriptions: () => (/* binding */ weatherDescriptions)
/* harmony export */ });
/* harmony import */ var _Assets_Images_sun_png_png__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Assets/Images/sun_png.png */ "./src/Assets/Images/sun_png.png");
/* harmony import */ var _Assets_Images_c_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Assets/Images/c.svg */ "./src/Assets/Images/c.svg");
/* harmony import */ var _Assets_Images_weather_icons_rainy_png__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Assets/Images/weather_icons_rainy.png */ "./src/Assets/Images/weather_icons_rainy.png");
/* harmony import */ var _Assets_Images_cloud_day_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Assets/Images/cloud_day.png */ "./src/Assets/Images/cloud_day.png");
/* harmony import */ var _Assets_Images_cloud_night_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Assets/Images/cloud_night.png */ "./src/Assets/Images/cloud_night.png");
/* harmony import */ var _Assets_Images_day_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Assets/Images/day.png */ "./src/Assets/Images/day.png");
/* harmony import */ var _Assets_Images_day_lightning_rain_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Assets/Images/day_lightning_rain.png */ "./src/Assets/Images/day_lightning_rain.png");
/* harmony import */ var _Assets_Images_mist_day_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Assets/Images/mist_day.png */ "./src/Assets/Images/mist_day.png");
/* harmony import */ var _Assets_Images_mist_night_png__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Assets/Images/mist_night.png */ "./src/Assets/Images/mist_night.png");
/* harmony import */ var _Assets_Images_night_png__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Assets/Images/night.png */ "./src/Assets/Images/night.png");
/* harmony import */ var _Assets_Images_night_lightning_rain_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Assets/Images/night_lightning_rain.png */ "./src/Assets/Images/night_lightning_rain.png");
/* harmony import */ var _Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Assets/Images/rain_cloud_day.png */ "./src/Assets/Images/rain_cloud_day.png");
/* harmony import */ var _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Assets/Images/rain_cloud_night.png */ "./src/Assets/Images/rain_cloud_night.png");
/* harmony import */ var _Assets_Images_snow_cloud_day_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Assets/Images/snow_cloud_day.png */ "./src/Assets/Images/snow_cloud_day.png");
/* harmony import */ var _Assets_Images_snow_cloud_night_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Assets/Images/snow_cloud_night.png */ "./src/Assets/Images/snow_cloud_night.png");
/* harmony import */ var _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Assets/Images/snow_day_night.png */ "./src/Assets/Images/snow_day_night.png");

















const weatherDescriptions = {
    1000: [_Assets_Images_day_png__WEBPACK_IMPORTED_MODULE_5__, _Assets_Images_night_png__WEBPACK_IMPORTED_MODULE_9__],
    1003: [_Assets_Images_cloud_day_png__WEBPACK_IMPORTED_MODULE_3__, _Assets_Images_cloud_night_png__WEBPACK_IMPORTED_MODULE_4__],
    1006: [_Assets_Images_cloud_day_png__WEBPACK_IMPORTED_MODULE_3__, _Assets_Images_cloud_night_png__WEBPACK_IMPORTED_MODULE_4__],
    1009: [_Assets_Images_cloud_day_png__WEBPACK_IMPORTED_MODULE_3__, _Assets_Images_cloud_night_png__WEBPACK_IMPORTED_MODULE_4__],
    1030: [_Assets_Images_mist_day_png__WEBPACK_IMPORTED_MODULE_7__, _Assets_Images_mist_night_png__WEBPACK_IMPORTED_MODULE_8__],
    1035: [_Assets_Images_mist_day_png__WEBPACK_IMPORTED_MODULE_7__, _Assets_Images_mist_night_png__WEBPACK_IMPORTED_MODULE_8__],
    1047: [_Assets_Images_mist_day_png__WEBPACK_IMPORTED_MODULE_7__, _Assets_Images_mist_night_png__WEBPACK_IMPORTED_MODULE_8__],
    1063: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1066: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1069: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1072: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1087: [_Assets_Images_day_lightning_rain_png__WEBPACK_IMPORTED_MODULE_6__, _Assets_Images_night_lightning_rain_png__WEBPACK_IMPORTED_MODULE_10__],
    1114: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1117: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1135: [_Assets_Images_mist_day_png__WEBPACK_IMPORTED_MODULE_7__, _Assets_Images_mist_night_png__WEBPACK_IMPORTED_MODULE_8__],
    1147: [_Assets_Images_mist_day_png__WEBPACK_IMPORTED_MODULE_7__, _Assets_Images_mist_night_png__WEBPACK_IMPORTED_MODULE_8__],
    1150: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1153: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1168: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1171: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1180: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1183: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1186: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1189: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1192: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1195: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1198: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1201: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1204: [_Assets_Images_snow_cloud_day_png__WEBPACK_IMPORTED_MODULE_13__, _Assets_Images_snow_cloud_night_png__WEBPACK_IMPORTED_MODULE_14__],
    1207: [_Assets_Images_snow_cloud_day_png__WEBPACK_IMPORTED_MODULE_13__, _Assets_Images_snow_cloud_night_png__WEBPACK_IMPORTED_MODULE_14__],
    1210: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1213: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1216: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1219: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1222: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1225: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1237: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1240: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1243: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1246: [_Assets_Images_rain_cloud_day_png__WEBPACK_IMPORTED_MODULE_11__, _Assets_Images_rain_cloud_night_png__WEBPACK_IMPORTED_MODULE_12__],
    1249: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1252: [_Assets_Images_snow_cloud_day_png__WEBPACK_IMPORTED_MODULE_13__, _Assets_Images_snow_cloud_night_png__WEBPACK_IMPORTED_MODULE_14__],
    1255: [_Assets_Images_snow_cloud_day_png__WEBPACK_IMPORTED_MODULE_13__, _Assets_Images_snow_cloud_night_png__WEBPACK_IMPORTED_MODULE_14__],
    1258: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1261: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1264: [_Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__, _Assets_Images_snow_day_night_png__WEBPACK_IMPORTED_MODULE_15__],
    1273: [_Assets_Images_day_lightning_rain_png__WEBPACK_IMPORTED_MODULE_6__, _Assets_Images_night_lightning_rain_png__WEBPACK_IMPORTED_MODULE_10__],
    1276: [_Assets_Images_day_lightning_rain_png__WEBPACK_IMPORTED_MODULE_6__, _Assets_Images_night_lightning_rain_png__WEBPACK_IMPORTED_MODULE_10__],
    1279: [_Assets_Images_day_lightning_rain_png__WEBPACK_IMPORTED_MODULE_6__, _Assets_Images_night_lightning_rain_png__WEBPACK_IMPORTED_MODULE_10__],
    1282: [_Assets_Images_day_lightning_rain_png__WEBPACK_IMPORTED_MODULE_6__, _Assets_Images_night_lightning_rain_png__WEBPACK_IMPORTED_MODULE_10__],
  };

  var isoCountries = {
    'Afghanistan': 'AF',
    'Aland Islands': 'AX',
    'Albania': 'AL',
    'Algeria': 'DZ',
    'American Samoa': 'AS',
    'Andorra': 'AD',
    'Angola': 'AO',
    'Anguilla': 'AI',
    'Antarctica': 'AQ',
    'Antigua And Barbuda': 'AG',
    'Argentina': 'AR',
    'Armenia': 'AM',
    'Aruba': 'AW',
    'Australia': 'AU',
    'Austria': 'AT',
    'Azerbaijan': 'AZ',
    'Bahamas': 'BS',
    'Bahrain': 'BH',
    'Bangladesh': 'BD',
    'Barbados': 'BB',
    'Belarus': 'BY',
    'Belgium': 'BE',
    'Belize': 'BZ',
    'Benin': 'BJ',
    'Bermuda': 'BM',
    'Bhutan': 'BT',
    'Bolivia': 'BO',
    'Bosnia And Herzegovina': 'BA',
    'Botswana': 'BW',
    'Bouvet Island': 'BV',
    'Brazil': 'BR',
    'British Indian Ocean Territory': 'IO',
    'Brunei Darussalam': 'BN',
    'Bulgaria': 'BG',
    'Burkina Faso': 'BF',
    'Burundi': 'BI',
    'Cambodia': 'KH',
    'Cameroon': 'CM',
    'Canada': 'CA',
    'Cape Verde': 'CV',
    'Cayman Islands': 'KY',
    'Central African Republic': 'CF',
    'Chad': 'TD',
    'Chile': 'CL',
    'China': 'CN',
    'Christmas Island': 'CX',
    'Cocos (Keeling) Islands': 'CC',
    'Colombia': 'CO',
    'Comoros': 'KM',
    'Congo': 'CG',
    'Congo, Democratic Republic': 'CD',
    'Cook Islands': 'CK',
    'Costa Rica': 'CR',
    'Cote D\'Ivoire': 'CI',
    'Croatia': 'HR',
    'Cuba': 'CU',
    'Cyprus': 'CY',
    'Czech Republic': 'CZ',
    'Denmark': 'DK',
    'Djibouti': 'DJ',
    'Dominica': 'DM',
    'Dominican Republic': 'DO',
    'Ecuador': 'EC',
    'Egypt': 'EG',
    'El Salvador': 'SV',
    'Equatorial Guinea': 'GQ',
    'Eritrea': 'ER',
    'Estonia': 'EE',
    'Ethiopia': 'ET',
    'Falkland Islands': 'FK',
    'Faroe Islands': 'FO',
    'Fiji': 'FJ',
    'Finland': 'FI',
    'France': 'FR',
    'French Guiana': 'GF',
    'French Polynesia': 'PF',
    'French Southern Territories': 'TF',
    'Gabon': 'GA',
    'Gambia': 'GM',
    'Georgia': 'GE',
    'Germany': 'DE',
    'Ghana': 'GH',
    'Gibraltar': 'GI',
    'Greece': 'GR',
    'Greenland': 'GL',
    'Grenada': 'GD',
    'Guadeloupe': 'GP',
    'Guam': 'GU',
    'Guatemala': 'GT',
    'Guernsey': 'GG',
    'Guinea': 'GN',
    'Guinea-Bissau': 'GW',
    'Guyana': 'GY',
    'Haiti': 'HT',
    'Heard Island & Mcdonald Islands': 'HM',
    'Holy See (Vatican City State)': 'VA',
    'Honduras': 'HN',
    'Hong Kong': 'HK',
    'Hungary': 'HU',
    'Iceland': 'IS',
    'India': 'IN',
    'Indonesia': 'ID',
    'Iran, Islamic Republic Of': 'IR',
    'Iraq': 'IQ',
    'Ireland': 'IE',
    'Isle Of Man': 'IM',
    'Israel': 'IL',
    'Italy': 'IT',
    'Jamaica': 'JM',
    'Japan': 'JP',
    'Jersey': 'JE',
    'Jordan': 'JO',
    'Kazakhstan': 'KZ',
    'Kenya': 'KE',
    'Kiribati': 'KI',
    'Korea': 'KR',
    'Kuwait': 'KW',
    'Kyrgyzstan': 'KG',
    'Lao People\'s Democratic Republic': 'LA',
    'Latvia': 'LV',
    'Lebanon': 'LB',
    'Lesotho': 'LS',
    'Liberia': 'LR',
    'Libyan Arab Jamahiriya': 'LY',
    'Liechtenstein': 'LI',
    'Lithuania': 'LT',
    'Luxembourg': 'LU',
    'Macao': 'MO',
    'Macedonia': 'MK',
    'Madagascar': 'MG',
    'Malawi': 'MW',
    'Malaysia': 'MY',
    'Maldives': 'MV',
    'Mali': 'ML',
    'Malta': 'MT',
    'Marshall Islands': 'MH',
    'Martinique': 'MQ',
    'Mauritania': 'MR',
    'Mauritius': 'MU',
    'Mayotte': 'YT',
    'Mexico': 'MX',
    'Micronesia, Federated States Of': 'FM',
    'Moldova': 'MD',
    'Monaco': 'MC',
    'Mongolia': 'MN',
    'Montenegro': 'ME',
    'Montserrat': 'MS',
    'Morocco': 'MA',
    'Mozambique': 'MZ',
    'Myanmar': 'MM',
    'Namibia': 'NA',
    'Nauru': 'NR',
    'Nepal': 'NP',
    'Netherlands': 'NL',
    'Netherlands Antilles': 'AN',
    'New Caledonia': 'NC',
    'New Zealand': 'NZ',
    'Nicaragua': 'NI',
    'Niger': 'NE',
    'Nigeria': 'NG',
    'Niue': 'NU',
    'Norfolk Island': 'NF',
    'Northern Mariana Islands': 'MP',
    'Norway': 'NO',
    'Oman': 'OM',
    'Pakistan': 'PK',
    'Palau': 'PW',
    'Palestinian Territory, Occupied': 'PS',
    'Panama': 'PA',
    'Papua New Guinea': 'PG',
    'Paraguay': 'PY',
    'Peru': 'PE',
    'Philippines': 'PH',
    'Pitcairn': 'PN',
    'Poland': 'PL',
    'Portugal': 'PT',
    'Puerto Rico': 'PR',
    'Qatar': 'QA',
    'Reunion': 'RE',
    'Romania': 'RO',
    'Russian Federation': 'RU',
    'Rwanda': 'RW',
    'Saint Barthelemy': 'BL',
    'Saint Helena': 'SH',
    'Saint Kitts And Nevis': 'KN',
    'Saint Lucia': 'LC',
    'Saint Martin': 'MF',
    'Saint Pierre And Miquelon': 'PM',
    'Saint Vincent And Grenadines': 'VC',
    'Samoa': 'WS',
    'San Marino': 'SM',
    'Sao Tome And Principe': 'ST',
    'Saudi Arabia': 'SA',
    'Senegal': 'SN',
    'Serbia': 'RS',
    'Seychelles': 'SC',
    'Sierra Leone': 'SL',
    'Singapore': 'SG',
    'Slovakia': 'SK',
    'Slovenia': 'SI',
    'Solomon Islands': 'SB',
    'Somalia': 'SO',
    'South Africa': 'ZA',
    'South Georgia And Sandwich Isl.': 'GS',
    'Spain': 'ES',
    'Sri Lanka': 'LK',
    'Sudan': 'SD',
    'Suriname': 'SR',
    'Svalbard And Jan Mayen': 'SJ',
    'Swaziland': 'SZ',
    'Sweden': 'SE',
    'Switzerland': 'CH',
    'Syrian Arab Republic': 'SY',
    'Taiwan': 'TW',
    'Tajikistan': 'TJ',
    'Tanzania': 'TZ',
    'Thailand': 'TH',
    'Timor-Leste': 'TL',
    'Togo': 'TG',
    'Tokelau': 'TK',
    'Tonga': 'TO',
    'Trinidad And Tobago': 'TT',
    'Tunisia': 'TN',
    'Turkey': 'TR',
    'Turkmenistan': 'TM',
    'Turks And Caicos Islands': 'TC',
    'Tuvalu': 'TV',
    'Uganda': 'UG',
    'Ukraine': 'UA',
    'United Arab Emirates': 'AE',
    'United Kingdom': 'GB',
    'United States': 'US',
    'United States Outlying Islands': 'UM',
    'Uruguay': 'UY',
    'Uzbekistan': 'UZ',
    'Vanuatu': 'VU',
    'Venezuela': 'VE',
    'Vietnam': 'VN',
    'Virgin Islands, British': 'VG',
    'Virgin Islands, U.S.': 'VI',
    'Wallis And Futuna': 'WF',
    'Western Sahara': 'EH',
    'Yemen': 'YE',
    'Zambia': 'ZM',
    'Zimbabwe': 'ZW'
  };
  
function objects() {
    return {
        weatherDescriptions,
        isoCountries
    }
}



/***/ }),

/***/ "./src/weather_api.js":
/*!****************************!*\
  !*** ./src/weather_api.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWeather)
/* harmony export */ });
async function getWeather(place , day = 0) {
    try {
        let location = place.split(" ").join("-");
        let responseForcast = await fetch(
            `https://api.weatherapi.com/v1/forecast.json?key=44b21494fc7747369bb71227242602&q=${location}&days=3`, {
                mode: 'cors'
            }
        );
        if (!responseForcast.ok) {
            console.error('fetching error', response)
        }

        let responseForcastJson = await responseForcast.json();

        const date = new Date();
        const hour = date.getHours();

        let temp_c = Math.round(responseForcastJson.forecast.forecastday[day].hour[hour].temp_c).toString();
        let feelslike_c = Math.round(responseForcastJson.forecast.forecastday[day].hour[hour].feelslike_c).toString();
        let name = responseForcastJson.location.name;
        let country = responseForcastJson.location.country;
        let humidity = responseForcastJson.forecast.forecastday[day].hour[hour].humidity;
        let pressure = responseForcastJson.forecast.forecastday[day].hour[hour].pressure_mb;
        let uv = responseForcastJson.forecast.forecastday[day].hour[hour].uv;
        let wind = responseForcastJson.forecast.forecastday[day].hour[hour].wind_kph;
        let max = Math.round(responseForcastJson.forecast.forecastday[day].day.maxtemp_c);
        let min = Math.round(responseForcastJson.forecast.forecastday[day].day.mintemp_c);
        let precipitation = responseForcastJson.forecast.forecastday[day].hour[hour].precip_mm;
        let rain = responseForcastJson.forecast.forecastday[day].day.daily_chance_of_rain;
        let condition = responseForcastJson.forecast.forecastday[day].hour[hour].condition.code;
        let latitude = responseForcastJson.location.lat;
        let longitude = responseForcastJson.location.lon;
        let local_hour = Number.parseFloat(responseForcastJson.location.localtime.split(" ")[1].split(":")[0]);
        let day_night;
        if (local_hour < 18 && local_hour > 6) {
            day_night = 0;
        } else {
            day_night = 1;
        }
        

        return {
            responseForcastJson,
            temp_c,
            feelslike_c,
            name,
            country,
            humidity,
            pressure,
            uv,
            wind,
            max,
            min,
            precipitation,
            rain,
            condition,
            latitude,
            longitude,
            day_night,
            local_hour
        }
    } catch (e) {
        console.error("the error is ", e);
    }
}

/***/ }),

/***/ "./src/Assets/Images/3.jpg":
/*!*********************************!*\
  !*** ./src/Assets/Images/3.jpg ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "b3829d953438e11a69ad.jpg";

/***/ }),

/***/ "./src/Assets/Images/c.svg":
/*!*********************************!*\
  !*** ./src/Assets/Images/c.svg ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "c4a1ea4776085c8051dd.svg";

/***/ }),

/***/ "./src/Assets/Images/cloud_day.png":
/*!*****************************************!*\
  !*** ./src/Assets/Images/cloud_day.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "8c221bcc53b4e5aed195.png";

/***/ }),

/***/ "./src/Assets/Images/cloud_night.png":
/*!*******************************************!*\
  !*** ./src/Assets/Images/cloud_night.png ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "519bb16e7e0c3cef1f9b.png";

/***/ }),

/***/ "./src/Assets/Images/day.png":
/*!***********************************!*\
  !*** ./src/Assets/Images/day.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "4d8fcf2e7d852f50481d.png";

/***/ }),

/***/ "./src/Assets/Images/day_lightning_rain.png":
/*!**************************************************!*\
  !*** ./src/Assets/Images/day_lightning_rain.png ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "cd211069d44a81101e5f.png";

/***/ }),

/***/ "./src/Assets/Images/mist_day.png":
/*!****************************************!*\
  !*** ./src/Assets/Images/mist_day.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "d6b00c745dcbd4e6ad49.png";

/***/ }),

/***/ "./src/Assets/Images/mist_night.png":
/*!******************************************!*\
  !*** ./src/Assets/Images/mist_night.png ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "038ad93747c51fbddd29.png";

/***/ }),

/***/ "./src/Assets/Images/night.png":
/*!*************************************!*\
  !*** ./src/Assets/Images/night.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "a63feca7d405ae87e5f7.png";

/***/ }),

/***/ "./src/Assets/Images/night_lightning_rain.png":
/*!****************************************************!*\
  !*** ./src/Assets/Images/night_lightning_rain.png ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "883511d8b5918c3de9c0.png";

/***/ }),

/***/ "./src/Assets/Images/rain_cloud_day.png":
/*!**********************************************!*\
  !*** ./src/Assets/Images/rain_cloud_day.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "d66fd5c0856aeddc81cd.png";

/***/ }),

/***/ "./src/Assets/Images/rain_cloud_night.png":
/*!************************************************!*\
  !*** ./src/Assets/Images/rain_cloud_night.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "7e5ad0c40c85472fe667.png";

/***/ }),

/***/ "./src/Assets/Images/snow_cloud_day.png":
/*!**********************************************!*\
  !*** ./src/Assets/Images/snow_cloud_day.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "c80627471d32a64ddde7.png";

/***/ }),

/***/ "./src/Assets/Images/snow_cloud_night.png":
/*!************************************************!*\
  !*** ./src/Assets/Images/snow_cloud_night.png ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "d546378aa2c3a51adbcc.png";

/***/ }),

/***/ "./src/Assets/Images/snow_day_night.png":
/*!**********************************************!*\
  !*** ./src/Assets/Images/snow_day_night.png ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "ed6f661277304e7c7b80.png";

/***/ }),

/***/ "./src/Assets/Images/sun_png.png":
/*!***************************************!*\
  !*** ./src/Assets/Images/sun_png.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "4d8fcf2e7d852f50481d.png";

/***/ }),

/***/ "./src/Assets/Images/weather_icons_rainy.png":
/*!***************************************************!*\
  !*** ./src/Assets/Images/weather_icons_rainy.png ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "70096cfb867fb8b6f5b6.png";

/***/ }),

/***/ "./src/Assets/fonts/static/Inter-Bold.ttf":
/*!************************************************!*\
  !*** ./src/Assets/fonts/static/Inter-Bold.ttf ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "0eaf807b1cf0eceabe0f.ttf";

/***/ }),

/***/ "./src/Assets/fonts/static/Inter-Light.ttf":
/*!*************************************************!*\
  !*** ./src/Assets/fonts/static/Inter-Light.ttf ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "02850f28027788580733.ttf";

/***/ }),

/***/ "./src/Assets/fonts/static/Inter-Medium.ttf":
/*!**************************************************!*\
  !*** ./src/Assets/fonts/static/Inter-Medium.ttf ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "3f7acfe50aad7ad68548.ttf";

/***/ }),

/***/ "./src/Assets/fonts/static/Inter-Regular.ttf":
/*!***************************************************!*\
  !*** ./src/Assets/fonts/static/Inter-Regular.ttf ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "9ca9ba81e9dcaa12b3a1.ttf";

/***/ }),

/***/ "./src/Assets/fonts/static/Inter-SemiBold.ttf":
/*!****************************************************!*\
  !*** ./src/Assets/fonts/static/Inter-SemiBold.ttf ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "6058d3da655fb35169c2.ttf";

/***/ }),

/***/ "./src/Assets/fonts/static/Inter-Thin.ttf":
/*!************************************************!*\
  !*** ./src/Assets/fonts/static/Inter-Thin.ttf ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "97a5cc3ca8d3b35a4239.ttf";

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.js"));
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,